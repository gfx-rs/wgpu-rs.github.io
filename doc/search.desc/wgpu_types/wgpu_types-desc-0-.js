searchState.loadedDescShard("wgpu_types", 0, "This library describes the API surface of WebGPU that is …\nThe types of the acceleration structure are axis aligned …\nA buffer used to store the compacted size of an …\nBuffer used for acceleration structure building.\nArray of all <code>Backend</code> values, corresponding to …\nEnable writes to all channels.\nAllow the acceleration structure to be compacted in a copy …\nAllow retrieval of the vertices of the triangle hit by a …\nAllow for incremental updates (no change in size), …\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nA ray-tracing acceleration structure binding.\nWhat a copy between acceleration structures should do\nFlags for acceleration structures\nFlags for acceleration structure geometries\nWhat type the data of an acceleration structure is\nUpdate mode for acceleration structure builds.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nDescribes an allocation in the <code>AllocatorReport</code>.\nA report that can be generated for informational purposes …\nFunction always passes\nThe total size of the copy overflows a <code>u64</code>.\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nThe texture can be both read and written in the shader via …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nChooses the first supported mode out of:\nChooses the first supported mode out of:\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows a buffer to be used as input for a bottom level …\nIf not present, the texture can’t be blended into the …\nEnable blue channel writes\nBuffer used for bottom level acceleration structure …\n<code>Backend::BrowserWebGpu</code>. Supported when targeting the web …\nSupports buffer bindings with sizes that aren’t a …\nBack face\nBackends supported by wgpu.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nDescribes a single binding inside a bind group.\nType of a binding in a bind group layout.\nDescriptor for all size defining attributes of all …\nDescriptor for all size defining attributes of a single …\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nA buffer binding.\nIntegral type used for <code>Buffer</code> offsets and sizes.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for <code>BufferSlice</code> sizes.\nInformation about a copy between a buffer and a texture.\nErrors that can occur while populating …\nA buffer transition for use with …\nDifferent ways that you can use a buffer.\nSimilar to <code>BufferUsages</code>, but used only for …\nAlways perform a full build.\nAmount of times the clipper is invoked. This is also the …\nAmount of primitives that are not culled by the clipper. …\nEnable red, green, and blue channel writes\nThe color target of a renderpass.\nSupports comparison samplers.\nFlag used by the wgpu-core texture tracker to say a …\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nAmount of times a compute shader is invoked. This will be …\nBuffer to buffer copy as well as buffer clear offsets and …\nBuffer-texture copies must have <code>bytes_per_row</code> aligned to …\nAllow a buffer to be the destination buffer for a […\nThe destination of a hardware copy. cbindgen:ignore\nAllows a texture to be the destination in a  […\nThe destination of a hardware copy. cbindgen:ignore\nAllow a buffer to be the source buffer for a […\nThe source of a hardware copy. cbindgen:ignore\nAllows a texture to be the source in a […\nThe source of a hardware copy. cbindgen:ignore\nSupports textures that are cube arrays.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDirectly duplicate an acceleration structure to another\nRGBA double precision color.\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nDescribes a <code>CommandBuffer</code>.\nDescribes a <code>CommandEncoder</code>.\nDuplicate and compact an acceleration structure\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nSpecifies how the alpha channel of the textures should be …\nConstant\nView of a texture which can be used to copy to a texture, …\n<code>wgpu-core</code>’s part of <code>InternalCounters</code>.\nCpu / Software Rendering.\nDescriptor for creating a bottom level acceleration …\nDescriptor for a shader module given by any of several …\nDescriptor for creating a top level acceleration structure.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nSupports depth bias clamping\nRead-only depth stencil usage.\nRead-write depth stencil usage\nSupports copies between depth textures and buffers.\n<code>Backend::Dx12</code>. Supported on Windows 10 and later\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nThe device’s <code>destroy</code> method was called.\nDescribes a <code>Device</code>.\nCorresponds to a <code>GPUDeviceLostReason</code>.\nSupported physical device types.\nTracing enabled.\nDiscards the resulting value of the render pass for this …\nDiscrete GPU with separate CPU/GPU memory.\nArgument buffer layout for <code>dispatch_indirect</code> commands.\nDisplay-P3 color space\nLists various ways the underlying platform does not …\nBinary flags listing features that may or may not be …\nRepresents the sets of additional limits on an adapter, …\nArgument buffer layout for <code>draw_indexed_indirect</code> commands.\nArgument buffer layout for <code>draw_indirect</code> commands.\nD.component\nD.alpha\nDirect3D-12 (Windows)\nIntegral type used for dynamic bind group offsets.\nThe combination of states that a buffer must exclusively …\nThe combination of states that a texture must exclusively …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nAttempted to obtain adapter specified by environment …\nFunction passes if new value is equal to existing value. …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nToken of the user agreeing to access experimental features.\nExtent of a texture related operation.\nAn external texture binding.\nDescribes an <code>ExternalTexture</code>.\nFormat of an <code>ExternalTexture</code>. This indicates the number of …\nParameters describing a gamma encoding transfer function …\nIf not present, the texture can’t be sampled with a …\nBinding is visible from the fragment shader of a render …\nAmount of times the fragment shader is ran. Accounts for …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nBits from <code>Features</code> in array form\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nOne half-precision float (no Rust equiv). <code>f32</code> in shaders.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nFront face\nVertex winding order which classifies the “front” face …\n<code>Backend::Gl</code>. Supported on Linux/Android, the web through …\nEnable green channel writes\nOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, …\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\n<code>wgpu-hal</code>’s part of <code>InternalCounters</code>.\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nIgnore the stencil state for the face.\nThe combination of states that a buffer may be in <em>at the </em>…\nThe combination of states that a texture may be in <em>at the </em>…\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nThe index buffer used for drawing.\nAllow a buffer to be the indirect buffer in an indirect …\nThe indirect or count buffer in a indirect draw or …\nSupports indirect drawing and dispatching.\nAlignment requirement for instance buffers used in …\nA timestamp that is invalid due to the platform not having …\nThe last-layer byte size overflows a <code>u64</code>.\nThe image stride overflows a <code>u64</code>.\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nThe alpha channel, if it exists, of the textures is …\nVertex data is advanced every instance.\nThe types of the acceleration structure are instances\nIntegrated GPU with shared CPU/GPU memory.\nAn internal counter for debugging purposes\nAll internal counters, exposed for debugging purposes.\nThe <code>bytes_per_row</code> is too small for the texture width.\nThe <code>rows_per_image</code> is too small for the texture height.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nOptimize for low memory footprint (both while building and …\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nMinimum alignment of buffer mappings.\nAllow a buffer to be mapped for reading using […\nThe argument to a read-only mapping.\nAllow a buffer to be mapped for writing using […\nThe argument to a write-only mapping.\nThe largest number that can be returned by …\nBinding is visible from the mesh shader of a mesh pipeline.\n<code>Backend::Metal</code>. Supported on macOS and iOS.\nSupports sample-rate shading.\nAllows a texture of this format to back a view passed as …\nAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.\nPresentation frames are kept in a single-frame queue. …\nApplications that have control over the content that is …\nmax(Src, Dst)\nDescribes a memory block in the <code>AllocatorReport</code>.\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nMetal API (Apple platforms)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\n<code>Backend::Noop</code>.\nNO_DUPLICATE_ANY_HIT_INVOCATION, not useful unless using …\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nPower usage is not considered when choosing an adapter.\nDummy backend, which may be used for testing.\nFunction passes if new value is not equal to existing …\nNo adapter available via the instance’s backends matched …\n<code>TextureFormat::R8Unorm</code> Y plane, and <code>TextureFormat::Rg8Unorm</code>\nIs OPAQUE (is there no alpha test) recommended as …\nThe combination of all usages that the are guaranteed to …\nThe combination of all usages that the are guaranteed to …\nBlend state of <code>(1 * src) + ((1 - src_alpha) * dst)</code>.\nQuery returns a single 64-bit number, serving as an …\nTracing disabled.\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nThe surface under the swap chain has changed.\nYUV 4:2:0 chroma subsampled format.\nOptimize for fast build time, recommended if geometry is …\nOptimize for fast ray tracing performance, recommended if …\nBlend mode that does standard alpha blending with …\nReady to present image to the surface.\nAll the apis that wgpu offers first tier of support for.\nRanges of writes to push constant storage must be at least …\nFavor performance over memory usage (the default value).\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded in a …\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nThis was a poll.\nError states after a device poll\nStatus of device poll operation.\nPassed to <code>Device::poll</code> to control how and if it should …\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nIf possible, perform an incremental update.\nTiming and queueing with which frames are actually …\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nA buffer used to store query results.\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a <code>QuerySetDescriptor</code>.\nSize in bytes of a single piece of query data.\nDescribes how to create a <code>QuerySet</code>.\nType of query contained in a <code>QuerySet</code>.\nThere are no active submissions in flight as of the …\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [−32767, …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 64 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [−127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nRead-only sampled or fetched resource.\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nError when <code>Instance::request_adapter()</code> fails.\nOptions for requesting adapter.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [−…\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [−…\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nSingle <code>TextureFormat::Rgba8Unorm</code> or …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use <code>quantizeToF16</code>, <code>pack2x16float</code>, and …\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nWhen used as a STORAGE texture, then a texture with this …\nAllows a texture to be used with image atomics. Requires …\nImage atomic enabled storage. cbindgen:ignore\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nWhen used as a STORAGE texture, then a texture with this …\nA read-only storage buffer used in a bind group. …\nRead-only storage texture usage. Corresponds to a UAV in …\nWhen used as a STORAGE texture, then a texture with this …\nA read-write buffer used in a bind group. cbindgen:ignore\nRead-write storage texture usage. cbindgen:ignore\nWhen used as a STORAGE texture, then a texture with this …\nWrite-only storage texture usage. cbindgen:ignore\nSupports specifying which view formats are allowed when …\nA sampler that can be used to sample a texture.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nDescribes how shader bound checks should be performed.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nOne signed short (u16). <code>i32</code> in shaders.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed byte (i8). <code>i32</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nOne signed short (i16). [−32767, 32767] converted to …\nTwo signed shorts (i16). [−32767, 32767] converted to …\nFour signed shorts (i16). [−32767, 32767] converted to …\nOne signed byte (i8). [−127, 127] converted to float [−…\nTwo signed bytes (i8). [−127, 127] converted to float […\nFour signed bytes (i8). [−127, 127] converted to float […\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nDefines the capabilities of a given surface and adapter.\nConfigures a <code>Surface</code> for presentation.\nStatus of the received surface image.\nBinding is visible from the task shader of a mesh pipeline.\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows a buffer to be used as input for a top level …\nBuffer used for top level acceleration structure building.\nAlignment requirement for transform buffers used in …\nView of a buffer which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nView of a texture which can be used to copy to/from a …\nA texture binding.\nSelects a subset of the data a <code>Texture</code> holds.\nOrder in which texture data is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nFormat in which a texture’s texels are stored in GPU …\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nSpecifies a particular set of subresources in a texture.\nA texture transition for use with …\nDifferent ways that you can use a texture.\nSimilar to <code>TextureUsages</code>, but used only for …\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nThe requested Wait timed out before the submission was …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\nControls API call tracing and specifies where the trace is …\n[0, 0, 0, 0]\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nTriangle geometry version.\nThe types of the acceleration structure are triangles\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nA uniform buffer bound in a bind group.\nThe texture is in unknown state.\nFlag used by the wgpu-core texture tracker to say that the …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nUse <code>BlasTriangleGeometry::transform_buffer</code> when building a …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nOne unsigned short (u16). <code>u32</code> in shaders.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned byte (u8). <code>u32</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nThe surface status is not known since …\nThe device was lost for an unspecific reason, including …\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nOne unsigned short (u16). [0, 65535] converted to float […\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nOne unsigned byte (u8). [0, 255] converted to float [0, 1] …\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\nFour unsigned 8-bit integers, packed into a 32-bit integer …\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nA vertex buffer used for drawing.\nVertex buffer offsets and strides have to be a multiple of …\nBinding is visible from the vertex and fragment shaders of …\nAmount of times the vertex shader is ran. Accounts for the …\nSupports storage buffers in vertex shaders.\nVertex buffer strides have to be a multiple of this number.\nSupports specifying which view format values are allowed …\n<code>Backend::Vulkan</code>. Supported on Windows, Linux/Android, and …\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API (Windows, Linux, Android, MacOS via …\nSupports all the texture usages described in WebGPU. If …\nOn wgpu-core based backends, block until the given …\nThe requested Wait was satisfied before the timeout.\nThe texture can only be written in the shader and it:\nThe requested Wait was given a wrong submission index.\nSeparate <code>TextureFormat::R8Unorm</code> Y, Cb, and Cr planes.\nZero origin.\nZero origin.\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nAlpha component of the color\nAmount of allocated gpu memory attributed to acceleration …\nReturns the alignment required for …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nCreates a new configuration where all checks are enabled …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe range of allocations in <code>AllocatorReport::allocations</code> …\nAll live allocations, sub-allocated from memory blocks.\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nReturns the number of array layers.\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nAspect of the texture. Color textures must be …\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nMacros for validation internal to the wgpu.\nBlue component of the color\nBack face mode.\nBackend used for device\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nDepth bias state.\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of texel in a texel block in the y direction.\nThe number of bytes one texel block occupies during an …\nThe size of a single texture texel block in bytes.\nThe number of texel in a texel block in the x direction.\nAll memory blocks.\nBorder color to use when <code>address_mode</code> is …\nEnforce bounds checks in shaders, even if the underlying …\nThe buffer to transition.\nThe buffer to be copied to/from.\nAmount of allocated gpu memory attributed to buffers, in …\nReturns the size in bytes of the index format\nWrapper to unsafely define a wrapper type that can be used …\nThe total number of bytes in the copy region.\nBytes per “row” in an image.\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nCreates a new configuration where the shader is fully …\nDepth bias clamp value (absolute).\nColor equation.\nThe color space of this texture.\nComparison function that determines if the fail_op or …\nIf this is enabled, this is a comparison sampler using the …\nSurface that is required to be presentable with the …\nGet the texture dimension required of this texture view …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nComputes the render extent of this texture.\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe height of the copy region in pixels.\nThe width of the copy region in pixels.\n<code>wgpu-core</code> counters.\nThe number of samples calculated per pixel (for MSAA). For …\nIf the binding is an array of multiple resources. …\nTotal count of queries the set contains. Must not be zero. …\nThe face culling mode.\nThese default limits are guaranteed to to work on all …\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nThe depth of the copy region in pixels.\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe dimension of the texture view. For 1D textures, this …\nDimensions of the texture.\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nTransfer function for the destination color space. This …\nShader DXIL source.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEntrypoint. Unused for Spir-V.\nReturns true if variants are same (ignoring clear value)\nShared types for WebGPU errors. See also: …\nSpecifies whether <code>self.required_features</code> is allowed to …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nCombined boolean flags.\nAdditional property flags for the format.\nFlags for the geometry.\nFlags for the bottom level acceleration structure.\nFlags for the bottom level acceleration structure.\nIndicates that only a fallback adapter can be returned. …\nIf false, the caller MUST ensure that all passed shaders …\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nThe texture format of the swap chain. The only formats …\nFormat of the texture view. Either must be the same as the …\nFormat of the texture.\nFormat of the external texture.\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nGenerates a set of backends from a comma separated list of …\nGet a power preference from the environment variable …\nGets a set of backends from the environment variable …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\n3x3 column-major matrix to transform linear RGB values in …\nShader GLSL source (currently unused).\nReturns the format features guaranteed by the WebGPU spec.\n<code>wgpu-hal</code> counters.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nHeight of the external texture.\nThe height of the copy region in blocks.\nShader HLSL source.\nThe number of bytes in a densely packed list of images.\nThe number of rows in a densely packed list of images.\nThe stride in bytes between the start of one image and the …\nThe stride in rows between the start of one image and the …\nThe number of indices to draw.\nNumber of indices. Only needed if an index buffer is used. …\nFormat of an index. Only needed if an index buffer is used.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTypes for dealing with Instances\nThe number of instances to draw.\nThe number of instances to draw.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for ASTC compressed formats.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns true if this timestamp is the invalid timestamp.\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the result is <code>Self::QueueEmpty</code>.\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nThis <code>PollType</code> represents a wait of some kind.\nReturns true if the underlying platform offers complete …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nDebug label for the device.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of the external texture. This will show up in …\nDebug label of the sampler. This will show up in graphics …\nDebug label of this command buffer.\nDebug label of the render bundle encoder. This will show …\nDebug label for the query set.\nLabel for the bottom level acceleration structure.\nLabel for the top level acceleration structure.\nDebug label of the shader module. This will show up in …\nReturns the layer range of a subresource range describes …\nRange of layers to use.\nThe layout of the texture data in this buffer.\nAdditional limits\nHow data should be read through this attachment.\nTransform to apply to <code>ImageLoad</code> coordinates.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nMap on the wait index type.\nTakes a closure and maps the label of the device …\nTakes a closure and maps the label of the buffer …\nTakes a closure and maps the label of the command encoder …\nTakes a closure and maps the label of the texture …\nTakes a closure and maps the label of the external texture …\nTakes a closure and maps the label of the command buffer …\nTakes a closure and maps the label of the render bundle …\nTakes a closure and maps the label of the query set …\nTakes a closure and maps the label of the blas descriptor …\nTakes a closure and maps the label of the blas descriptor …\nTakes a closure and maps the label of the shader module …\nMaps the label and view formats of the texture descriptor …\nMap <code>view_formats</code> of the texture descriptor into another.\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nUtilitary math functions.\nThe maximum number of acceleration structures allowed to …\nAmount of bind groups that can be attached to a pipeline …\nAmount of individual resources within binding arrays that …\nAmount of individual samplers within binding arrays that …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nThe maximum number of geometry descriptors a BLAS is …\nThe maximum number of primitive (ex: triangles, aabbs) a …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the <code>workgroup_size</code> X dimension for a …\nThe maximum value of the <code>workgroup_size</code> Y dimension for a …\nThe maximum value of the <code>workgroup_size</code> Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nNumber of instances that can be stored in the acceleration …\nMaximum allowed number of components (scalars) of input or …\nThe maximum number of views that can be used by a mesh …\nThe maximum number of layers that can be output from a …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nThe maximum total value of x<em>y</em>z for a given <code>draw_mesh_tasks</code> …\nThe maximum value for each dimension of a …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nThe maximum number of instances a TLAS is allowed to have. …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nNumber of gpu memory allocations.\nHints for memory allocation strategies.\nReturns the size read by an acceleration structure build …\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nCalculates the extent at a given mip level.\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nRange of mips to use.\nShader MSL source.\nThe name provided to the <code>allocate()</code> function.\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of underlying planes used by the external …\nNumber of workgroups in each dimension x, y and z. Unused …\nThe offset in bytes of the allocation in its memory block.\nThe offset in the buffer where the copy starts.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nFor each limit in <code>other</code> that is better than the value in …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nPower preference for the adapter.\nThe premultiplication of this texture\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nThe number of bytes in the last row of the copy region.\nThe stride in bytes between the start of one row in an …\n“Rows” that make up a single “image”.\nRuntime checks that should be enabled.\nSample count of texture. If this is not 1, texture must …\nSample count supported by a given texture format.\nTransform to apply to <code>ImageSample</code> coordinates.\nReturns the sample type compatible with this format and …\nAn optional selector to transition only part of the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the byte size of the format.\nThe size in bytes of the allocation.\nThe size in bytes of this memory block.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nTransfer function for the source color space. The <em>inverse</em> …\nStage push constant range is visible from. Each stage can …\nThe new state to transition to.\nThe new state to transition to.\nStencil state.\nIf the stencil aspect of the depth stencil attachment is …\nWhether data will be written to through this attachment.\nThis is equivalent to <code>core::assert</code> if the <code>strict_asserts</code> …\nThis is equivalent to <code>core::assert_eq</code> if the <code>strict_asserts</code>…\nThis is equivalent to <code>core::assert_ne</code> if the <code>strict_asserts</code>…\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe texture to transition.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nReturns the theoretical memory footprint of a texture with …\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nSum of the memory used by all allocations, in bytes.\nSum of the memory reserved by all memory blocks including …\nWhether API tracing for debugging is enabled, and where …\nReturns the binary file extension for tracing purpose.\nReturns the source data for tracing purpose.\nThe type of the binding\nKind of query that this query set should contain.\nCreates a new configuration where none of the checks are …\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only usage guaranteed to …\nThe allowed usage(s) for the texture view. Must be a …\nAllowed usages of the texture. If used in other ways, the …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the acceleration …\nModify the current limits to use the buffer alignment …\nThe minimum guaranteed limits for acceleration structures …\nThe recommended minimum limits for mesh shaders if you …\nModify the current limits to use the resolution limits of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe number of vertices to draw.\nNumber of vertices.\nFormat of a vertex position, must be …\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nReturns true if the result is either <code>Self::WaitSucceeded</code> …\nWait indefinitely until for the most recent submission to …\nShader WGSL source.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nWidth of the external texture.\nThe width of the copy region in blocks.\nTakes the given options, modifies them based on the …\nInvoke a macro for each of the limits.\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nX position of the origin\nThe number of work groups in X dimension.\nY position of the origin\nThe number of work groups in Y dimension.\n4x4 column-major matrix with which to convert sampled …\nZ position of the origin\nThe number of work groups in Z dimension.\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nWhether this acceleration structure can be used to create …\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nDescriptor for each triangle geometry.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nDefines the range of allowed memory block sizes for …\nSubmission index to wait for.\nMax time to wait for the submission to complete.\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nDescribes an allocation in the <code>AllocatorReport</code>.\nA report that can be generated for informational purposes …\n<code>wgpu-core</code>’s part of <code>InternalCounters</code>.\n<code>wgpu-hal</code>’s part of <code>InternalCounters</code>.\nAn internal counter for debugging purposes\nAll internal counters, exposed for debugging purposes.\nDescribes a memory block in the <code>AllocatorReport</code>.\nAmount of allocated gpu memory attributed to acceleration …\nIncrement the counter by the provided amount.\nThe range of allocations in <code>AllocatorReport::allocations</code> …\nAll live allocations, sub-allocated from memory blocks.\nAll memory blocks.\nAmount of allocated gpu memory attributed to buffers, in …\n<code>wgpu-core</code> counters.\nReturns the argument unchanged.\n<code>wgpu-hal</code> counters.\nCalls <code>U::from(self)</code>.\nNumber of gpu memory allocations.\nThe name provided to the <code>allocate()</code> function.\nCreates a counter with value 0.\nThe offset in bytes of the allocation in its memory block.\nGet the counter’s value.\nSets the counter to the provided value.\nThe size in bytes of the allocation.\nThe size in bytes of this memory block.\nDecrement the counter by the provided amount.\nGet and reset the counter’s value.\nAmount of allocated gpu memory attributed to textures, in …\nSum of the memory used by all allocations, in bytes.\nSum of the memory reserved by all memory blocks including …\nNo-std friendly version of <code>std::env::var</code>. Returns <code>None</code> if …\nIndicates that device loss occurred. In JavaScript, this …\nA classification of WebGPU error for implementers of the …\nA <code>GPUInternalError</code>.\nA <code>GPUOutOfMemoryError</code>.\nA <code>GPUValidationError</code>.\nA trait for querying the <code>ErrorType</code> classification of an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermine the classification of this error as a WebGPU …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on …\nAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on …\nAllows the user to create arrays of buffers in shaders:\nAllows the user to create arrays of buffers in shaders:\nEnables clear to zero for textures.\nEnables clear to zero for textures.\nAllows the use of <code>@builtin(clip_distances)</code> in WGSL.\nAllows the use of <code>@builtin(clip_distances)</code> in WGSL.\nAllows the user to set a …\nAllows the user to set a …\nAllows for explicit creation of textures of format …\nAllows for explicit creation of textures of format …\nBy default, polygon depth is clipped to 0-1 range …\nBy default, polygon depth is clipped to 0-1 range …\nAllows two outputs from a shader to be used for blending. …\nAllows two outputs from a shader to be used for blending. …\nEnables mesh shaders and task shaders in mesh shader …\nEnables mesh shaders and task shaders in mesh shader …\nEnables multiview in mesh shader pipelines\nEnables multiview in mesh shader pipelines\nEnables creating shaders from passthrough with reflection …\nEnables creating shaders from passthrough with reflection …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\nAllows usage of additional vertex formats in …\nAllows usage of additional vertex formats in …\nAllows for the creation and usage of <code>ExternalTexture</code>s, and …\nAllows for the creation and usage of <code>ExternalTexture</code>s, and …\nAllows textures with formats “r32float”, “rg32float…\nAllows textures with formats “r32float”, “rg32float…\nBits from <code>Features</code> in array form\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nAllows non-zero value for the <code>first_instance</code> member in …\nAllows non-zero value for the <code>first_instance</code> member in …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call …\nAllows the user to call …\nAllows the user to create bind groups containing arrays …\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAllows the use of push constants: small, fast bits of …\nAllows the use of push constants: small, fast bits of …\nAllows for usage of textures of format …\nAllows for usage of textures of format …\nAllows shaders to index sampled texture and storage buffer …\nAllows shaders to index sampled texture and storage buffer …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to use 16-bit floating point types. You may …\nAllows shaders to use 16-bit floating point types. You may …\nEnables 64-bit floating point types in SPIR-V shaders.\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use f32 atomic load, store, add, sub, …\nAllows shaders to use f32 atomic load, store, add, sub, …\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllows the user to create uniform arrays of storage …\nAllows the user to create uniform arrays of storage …\nAllows shaders to index storage texture resource arrays …\nAllows shaders to index storage texture resource arrays …\nAllows compute and fragment shaders to use the subgroup …\nAllows compute and fragment shaders to use the subgroup …\nAllows compute shaders to use the subgroup barrier.\nAllows compute shaders to use the subgroup barrier.\nAllows vertex shaders to use the subgroup operation …\nAllows vertex shaders to use the subgroup operation …\nEnables device specific texture format features.\nEnables device specific texture format features.\nEnables image atomic fetch add, and, xor, or, min, and max …\nEnables image atomic fetch add, and, xor, or, min, and max …\nAllows the user to create uniform arrays of textures in …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables ASTC HDR family of compressed textures.\nAllows the 3d dimension for textures with ASTC compressed …\nAllows the 3d dimension for textures with ASTC compressed …\nEnables BCn family of compressed textures. All BCn …\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nEnables R64Uint image atomic min and max.\nEnables R64Uint image atomic min and max.\nEnables use of Timestamp Queries. These queries tell the …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows uniform buffers to be bound as binding arrays.\nAllows uniform buffers to be bound as binding arrays.\nEnables using 64-bit types for vertex attributes.\nEnables using 64-bit types for vertex attributes.\nEnables bindings of writable storage buffers and textures …\nEnables bindings of writable storage buffers and textures …\nAllows using the VK_KHR_external_memory_win32 Vulkan …\nAllows using the VK_KHR_external_memory_win32 Vulkan …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns self with all flags set.\nMask of all features which are experimental.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nVertex formats allowed for creating and building BLASes\nMacro for creating sets of bitflags, we need this because …\nGet the underlying bits value.\nGet the underlying bits value.\nGets the set flags as a container holding an array of bits.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nBitwise not - <code>!self</code>\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all the bits set in <code>other</code> are all set in <code>self</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nBitwise and of the complement of other - <code>self &amp; !other</code>\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns self with no flags set.\nConvert from a bits value.\nConvert from a bits value.\nTakes in <code>FeatureBits</code> and returns None if there are invalid …\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nTakes in <code>FeatureBits</code> and returns Self with all bits that …\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nTakes in <code>FeatureBits</code> and returns Self with only valid bits …\nCombines the features from the internal flags into the …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nTakes in a name and returns Self if it matches or none if …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts specified flag(s) into self\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nBitwise and - <code>self &amp; other</code>\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nReturns whether any bit set in <code>self</code> matched any bit set in …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns whether the struct has all flags set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns whether there is no flag set.\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns an iterator over the set flags.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns an iterator over the set flags and their names.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves specified flag(s) from self\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCalls <code>Self::insert</code> if <code>set</code> is true and otherwise calls …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBitwise xor - <code>self ^ other</code>\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nToggles specified flag(s) in self\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBitwise or - <code>self | other</code>\nConstant values for <code>super::FeaturesWebGPU</code>, separated so …\nWhether wgpu should expose adapters that run on top of …\nEnable automatic timestamp normalization. This means that …\nFences in OpenGL are short-circuited to always return <code>true</code> …\nNo explicit minor version is requested, the driver …\nOptions that are passed to a given backend.\nGenerate debug information in shaders and objects.\nDon’t pass labels to wgpu-hal.\nCreate the swapchain with the …\nConfiguration for the DX12 backend.\nSelects which DX12 shader compiler to use.\nSelects which kind of swapchain to use on DX12.\nWhether and how to use a waitable handle obtained from …\nDXC shader model.\nUse a DXGI swapchain made directly from the window’s …\nUse a DXGI swapchain made from a DirectComposition visual …\nThe Dxc compiler is new, fast and maintained.\nThe Fxc compiler (default) is old, slow and unmaintained.\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nConfiguration for the OpenGL/OpenGLES backend.\nDictate the behavior of fences in OpenGL.\nSelects which OpenGL ES 3 minor version to request.\nOptions for creating an instance.\nInstance debugging flags.\nMemory budget thresholds used by backends to try to avoid …\nDo not obtain a waitable handle and do not wait for it. …\nConfiguration for the noop backend.\nFences in OpenGL behave normally. If you don’t know what …\nThe statically-linked variant of Dxc.\nEnable validation in the backend API, if possible:\nValidate indirect buffer content prior to issuing indirect …\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nObtain a waitable handle and wait for it before acquiring …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nOptions the control the behavior of specific backends.\nWhich <code>Backends</code> to enable.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nEnable recommended debugging and validation flags.\nHelper function to construct a <code>DynamicDxc</code> variant with …\nThe intersection of a source flags value with the …\nOptions for the DX12 backend, <code>Backend::Dx12</code>.\nGet a flags value with all bits unset.\nWhether to allow the noop backend to be used.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nBehavior of OpenGL fences. Affects how …\nFlags to tune the behavior of the instance.\nThreshold at which devices will become lost due to memory …\nThreshold at which texture, buffer, query set and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nInfer decent defaults from the build type.\nChoose which presentation system to use from the …\nChoose which DX12 shader compiler to use from the …\nChoose whether to use a frame latency waitable object from …\nChoose which minor OpenGL ES version to use from the …\nChoose which minor OpenGL ES version to use from the …\nChoose instance options entirely from environment …\nDerive defaults from environment variables. See …\nChoose backend options by calling <code>from_env</code> on every field.\nChoose OpenGL backend options by calling <code>from_env</code> on every …\nChoose DX12 backend options by calling <code>from_env</code> on every …\nChoose whether the noop backend is enabled from the …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nOptions for the OpenGL/OpenGLES backend, <code>Backend::Gl</code>.\nWhich OpenGL ES 3 minor version to request, if using …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the fence behavior is <code>AutoFinish</code>.\nWhether all bits in this flags value are unset.\nReturns true if the fence behavior is <code>Normal</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nWhether to wait for the latency waitable object before …\nMemory budget thresholds used by some backends.\nOptions for the noop backend, <code>Backend::Noop</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPresentation system to use.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWhich DX12 shader compiler to use.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTakes the given options, modifies them based on the …\nTakes the given flags, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given presentation system, modifies it based on …\nTakes the given compiler, modifies it based on the …\nTakes the given setting, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nPath to <code>dxcompiler.dll</code>.\nMaximum shader model the given dll supports.\nAligns a <code>value</code> to an <code>alignment</code>.\nToken of the user agreeing to access experimental features.\nUses of <code>Features</code> prefixed with “EXPERIMENTAL” are …\nUses of <code>Features</code> prefixed with “EXPERIMENTAL” may …\nReturns true if the user has agreed to access experimental …\nThe total size of the copy overflows a <code>u64</code>.\nThe total size of the copy overflows a <code>u64</code>.\nInformation about a copy between a buffer and a texture.\nErrors that can occur while populating …\nThe last-layer byte size overflows a <code>u64</code>.\nThe last-layer byte size overflows a <code>u64</code>.\nThe image stride overflows a <code>u64</code>.\nThe image stride overflows a <code>u64</code>.\nThe <code>bytes_per_row</code> is too small for the texture width.\nThe <code>bytes_per_row</code> is too small for the texture width.\nThe <code>rows_per_image</code> is too small for the texture height.\nThe <code>rows_per_image</code> is too small for the texture height.\nThe number of texel in a texel block in the y direction.\nThe size of a single texture texel block in bytes.\nThe number of texel in a texel block in the x direction.\nThe total number of bytes in the copy region.\nThe height of the copy region in pixels.\nThe width of the copy region in pixels.\nThe depth of the copy region in pixels.\nThe height of the copy region in blocks.\nThe number of bytes in a densely packed list of images.\nThe number of rows in a densely packed list of images.\nThe stride in bytes between the start of one image and the …\nThe stride in rows between the start of one image and the …\nThe offset in the buffer where the copy starts.\nThe number of bytes in the last row of the copy region.\nThe stride in bytes between the start of one row in an …\nThe width of the copy region in blocks.")