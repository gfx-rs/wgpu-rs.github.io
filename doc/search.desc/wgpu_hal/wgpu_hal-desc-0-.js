searchState.loadedDescShard("wgpu_hal", 0, "A cross-platform unsafe graphics abstraction.\nAllow the acceleration structure to be compacted in a copy …\nAllow retrieval of the vertices of the triangle hit by a …\nAllow for incremental updates (no change in size), …\n<code>offset</code> - offset in bytes\nFlags for acceleration structures\nInformation of the required size for a corresponding …\nEntries for a single descriptor\nFlags for acceleration structure geometries\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>first_vertex</code> - offset in the vertex buffer (as number of …\nAll the types and methods that make up a implementation on …\nBindGroup descriptor.\ncbindgen:ignore\nBindGroupLayout descriptor.\nPipeline layout creation flags.\nA region of a buffer made visible to shaders via a …\nUpdates use source_acceleration_structure if present, else …\nFormat can be used as color and input attachment.\nFormat can be used as color (with blending) and input …\nFormat can be copied to.\nFormat can be copied from.\nThis API’s command buffer type.\nEncoder and allocation pool for <code>CommandBuffer</code>s.\nDescribes a compute pipeline.\nFormat can be used as depth-stencil and input attachment.\nA connection to a GPU and a pool of resources to use with …\nA callback to signal that wgpu is no longer using a …\nBase trait for all resources, allows downcasting via <code>Any</code>.\nAn adapter with all the information needed to reason about …\nD3D12: Add support for <code>first_vertex</code> and <code>first_instance</code> …\nA value you can block on to wait for something to finish.\nTexture format capability flags.\nAll buffers, buffer addresses and offsets will be ignored.…\nD3D12: Add support for the builtins that the other flags …\nError occurring while trying to create an instance, or …\nOptimize for low memory footprint (both while building and …\nFormat can be used for render pass resolve targets.\nFormat can be multisampled by x16.\nFormat can be multisampled by x2.\nFormat can be multisampled by x4.\nFormat can be multisampled by x8.\nNO_DUPLICATE_ANY_HIT_INVOCATION, not useful unless using …\nD3D12: Add support for <code>num_workgroups</code> builtins via push …\nNaga shader module.\nNo value.\nIs OPAQUE (is there no alpha test) recommended as …\nAn open connection to a device and a queue.\nAllows for bind group binding arrays to be shorter than …\nOptimize for fast build time, recommended if geometry is …\nOptimize for fast ray tracing performance, recommended if …\nPipeline layout creation flags.\nDescribes a programmable pipeline stage.\nSize of a single occlusion/timestamp query, when copied …\nDescribes a render (graphics) pipeline.\nFormat can be sampled.\nFormat can be sampled with a linear sampler.\nFormat can be sampled with a min/max reduction sampler.\nFormat can be used as storage with atomics.\nFormat can be used as storage with read-only access.\nFormat can be used as storage with both read and write …\nFormat can be used as storage with write-only access.\nShader input.\nTemporary convenience trait to let us call <code>.get()</code> on <code>u64</code>s …\nSome value of type <code>T</code>.\nDescribes information about what a <code>Surface</code>’s …\nTexture format capability flags.\nTextureView descriptor.\nUse <code>BlasTriangleGeometry::transform_buffer</code> when building a …\nStores the text of any validation errors that have …\nFlag for internal testing.\nDescribes how the vertex buffer is interpreted.\nReturn the next texture to be presented by <code>self</code>, for the …\nA hook for when a wgpu-core buffer is created from a raw …\nA hook for when a wgpu-core texture is created from a raw …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nBegin a new compute pass, clearing all active bindings.\nBegin encoding a new command buffer.\nSafety:\nBegin a new render pass, clearing all active bindings.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe buffer being bound.\nThe alignment of the start of the buffer used as a GPU …\nThe alignment of the row pitch of the texture data stored …\nTo get the required sizes for the buffer allocations use …\nThe cache which will be used and filled when compiling …\nThe cache which will be used and filled when compiling …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAlpha composition mode.\nList of supported alpha composition modes.\nConfigure <code>self</code> to use <code>device</code>.\nPipeline constants\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCopy from buffer to texture. Works with a single array …\nCopy from texture to buffer. Works with a single array …\nCopy from one texture to another. Works with a single …\nCreates a bind group layout.\nCreates a new buffer.\nCreate a fresh <code>CommandEncoder</code>.\nCreates a new texture.\nCurrent extent of the surface, if known.\nSource codes for debug\nThe effect of draw calls on the depth and stencil aspects …\nFree <code>buffer</code> and any GPU resources it owns.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDiscard the command list under construction.\nRelinquish an acquired texture without presenting it.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe upper bound of the range (exclusive).\nEnd the current compute pass.\nReturn a fresh <code>CommandBuffer</code> holding the recorded commands.\nSafety:\nEnd the current render pass.\nThe name of the entry point in the compiled shader. There …\n<code>surface_hint</code> is only used by the GLES backend targeting …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRequested texture extent. Must be in …\nIndicate that CPU writes to mapped buffer memory should be …\nFormat of the surface textures.\nList of supported texture formats.\nThe fragment stage for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>PresentationTimestamp</code> using the adapter’s WSI.\nGLES API internals.\nAnalysis information of the module.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate that GPU writes to mapped buffer memory should be …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if only one flag is set\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nReturn a pointer to CPU memory mapping the contents of …\nRange for the number of queued frames.\nMaximum number of queued frames. Must be in …\nThese errors are very platform specific, so do not attempt …\nShader module IR.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nConstruct a <code>BufferBinding</code> with the given contents.\nA dummy API implementation.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset at which the bound region starts.\nOrigin within a texture. Note: for 1D and 2D textures, Z …\nVertical synchronization mode.\nList of supported V-sync modes.\nThe properties of the pipeline at the primitive assembly …\nThe size of the raw TLAS instance\nWhat the scratch buffer for building an acceleration …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReclaim all resources belonging to this <code>CommandEncoder</code>.\nSafety\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the bind group at <code>index</code> to <code>group</code>.\nSets a range in push constant data.\nThe size of the region bound, in bytes.\nUnderlying error value, if any is available.\nThe compiled compute stage and its entry point.\nThe lower bound of the range (inclusive).\nStart a graphics debugger capture.\nHow often this vertex buffer is “stepped” forward.\nStop a graphics debugger capture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmit <code>command_buffers</code> for execution on GPU.\nThe presentation configuration no longer matches the …\nThe presentation configuration no longer matches the …\nReturns the capabilities of working with a specified …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the set of supported capabilities for a texture …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUnconfigure <code>self</code> on <code>device</code>.\nThe finest alignment of bound range checking for uniform …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove the mapping established by the last call to …\nSupported texture usage flags.\nAllowed usage of surface textures,\nContains either a single mutating usage as a target, or a …\nThe vertex processing state(vertex shader + buffers or …\nAllows views of this texture to have a different format …\nAllows views of swapchain texture to have a different …\nVulkan API internals.\nWait for <code>fence</code> to reach <code>value</code>.\nWhether workgroup scoped memory will be initialized with …\nThe format of any vertex buffers used with this pipeline.\nThe vertex stage for this pipeline.\nMaximum binding size for the shaders that only support <code>i32</code> …\nRenderDoc integration - https://renderdoc.org/\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\ncbindgen:ignore\nRenderDoc functionality is available\nAn implementation specific handle\nRenderDoc functionality is <em>not</em> available\nRenderDoc API type\nThe dynamically loaded RenderDoc API function table\nEnd a RenderDoc frame capture\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a RenderDoc frame capture\nRenderDoc API with function pointers\nA description why renderdoc functionality is not available\nBase trait for all resources, allows downcasting via <code>Any</code>.\nExtension trait for <code>DynResource</code> used by implementations of …\nPanics\nPanics\nUtility macro for implementing <code>DynResource</code> for a list of …\nUnboxes a <code>Box&lt;dyn DynResource&gt;</code> to a concrete type.\nReturns the backend this adapter is using.\nThe presentation configuration no longer matches the …\nA wrapper around a <code>glow::Context</code> and the required EGL …\nA guard containing a lock to an <code>AdapterContext</code>, while the …\nIndicates support for <code>glBufferStorage</code> allocation.\nSupports <code>f11/f10</code> and <code>f32</code> color buffers\nSupports <code>f16</code> color buffers\nSupports <code>push_debug_group</code>, <code>pop_debug_group</code> and …\nBuffer map must emulated because it is not supported …\nRender to a <code>glow::NativeFramebuffer</code> Useful when the …\nIndicates support for …\nSupports <code>glGetBufferSubData</code>\nIndicates that buffers used as <code>GL_ELEMENT_ARRAY_BUFFER</code> may …\nSupports framebuffer invalidation.\nSupport memory barriers.\nFlags that affect internal code paths but do not change …\nSupports 64 bit queries via <code>glGetQueryObjectui64v</code>\nSupports query buffer objects.\nSupport explicit layouts in shader.\nSupport extended shadow sampling instructions.\nFor each texture in the pipeline layout, store the index …\nSupports <code>glTexStorage2D</code>, etc.\nVertex buffer layouts separate from the data.\nFlags that indicate necessary workarounds for specific …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMapping of resources, indexed by <code>binding</code>, into the whole …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the underlying EGL context.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\ncbindgen:ignore\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the <code>target</code>, whether the image is 3d and whether …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nMore information can be found in issues #1614 and #1574\nResult of <code>gl.get_parameter_i32(glow::MAX_SAMPLES)</code>. Cached …\nCreates a new external adapter using the specified loader …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAccording to the OpenGL specification, the version …\nNote that this function is intentionally lenient in …\nPerforms a manual shader clear, used as a workaround for a …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShader program used to clear the screen for …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSafety\nSafety\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nKeep a reasonably large buffer filled with zeroes, so that …\nOffset from the start of the <code>data_bytes</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper around a <code>glow::Context</code> and the required EGL …\nA guard containing a lock to an <code>AdapterContext</code>, while the …\nThe amount of time to wait while trying to obtain a lock …\nUsing EGL 1.5’s support for colorspaces\nDisplayOwner ties the lifetime of the system display handle\nA simple wrapper around an X11 or Wayland display handle. …\nUsing EGL_KHR_gl_colorspace\nNo value.\nNo support for SRGB surface\nSome value of type <code>T</code>.\nConvenience for getting the underlying pointer\nChoose GLES framebuffer configuration.\nNote: the context contains a dummy pbuffer (1x1). Required …\nReturns the EGL instance.\nReturns the EGL version the adapter context was created …\nReturns the version of the EGL display.\nExtent because the window lies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet’s the <code>glow::Context</code> without waiting for a lock\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain a lock to the EGL context and get handle to the …\nReturns the EGLDisplay corresponding to the adapter …\nMethod by which the framebuffer should support srgb\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe capabilities of the noop backend.\nCommand buffer type, which performs double duty as the …\nContains the error value\nContains the success value\nReturns the adapter info for the noop backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of the allocation.\nThis data is potentially accessed mutably in arbitrary …\nReturns a pointer to the memory owned by this buffer …\nConvert a <code>crate::MemoryRange</code> to <code>Range&lt;usize&gt;</code> and bounds …\nSize of the allocation.\nThis data is potentially accessed mutably in arbitrary …\nCommand buffer type, which performs double duty as the …\nSafety\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStores the text of any validation errors that have …\nFlag for internal testing.\nReturns any API validation errors that have occurred in …\nInformation about a binding within a specific …\nCallback to allow changing the vulkan device creation …\nArguments to the <code>CreateDeviceCallback</code>.\nCallback to allow changing the vulkan instance creation …\nArguments to the <code>CreateInstanceCallback</code>.\nUser data needed by …\nQualcomm OOMs when there are zero color attachments but a …\nThe loaded function pointer struct for an extension.\nIf the following code returns false, then nvidia will end …\nThe <code>Api::Fence</code> type for <code>vulkan::Api</code>.\nA collection of Vulkan fences, each associated with a …\nA texture view paired with its identity.\nFeatures supported by a <code>vk::PhysicalDevice</code> and its …\nSet of internal capabilities, which don’t show up in the …\nThe extension was promoted to a core version of Vulkan and …\nSemaphores for forcing queue submissions to run in order.\nA unique identifier for a resource of type <code>T</code>.\nGenerates unique IDs for each resource of type <code>T</code>.\nOnly generate SPIR-V for one entry point at a time.\nSemaphore used to acquire a swapchain image.\nMiscellaneous allocation recycling pool for …\nA Vulkan timeline semaphore.\nThe properties related to the validation layer needed for …\nWorkaround flags.\nFeatures provided by <code>VK_KHR_16bit_storage</code>, promoted to …\nWe need to have <code>&#39;this</code> in the struct, so we can declare …\nWe need to have <code>&#39;this</code> in the struct, so we can declare …\nFeatures provided by <code>VK_KHR_acceleration_structure</code>.\nA semaphore that is signaled when this image is safe for …\nSemaphores used between image acquisition and the first …\nThe current command buffer, if <code>self</code> is in the “recording…\nAdvances the semaphores, returning the semaphores that …\nMark the current frame finished, advancing to the next …\nGet a flags value with all known bits set.\nFeatures provided by <code>VK_EXT_texture_compression_astc_hdr</code>, …\nBecause this is used as a key in a hash map, we need to …\nWhile this is redundant for calculating the hash, we need …\nWhat kind of pass we are currently within: compute or …\nMap of original binding index to remapped binding index …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFeatures provided by <code>VK_KHR_buffer_device_address</code>, …\nOwning pointer to the debug messenger callback user data.\nAbility to present contents to any screen. Only needed to …\nReturn the highest <code>FenceValue</code> among the signalled fences …\nReturns an attachment key for a compatible attachment.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nBasic Vulkan 1.0 features.\nThe create info for the device. You may add or modify …\nThe create info for the instance. You may add or modify …\nCreates a new surface from the given drm configuration.\nFeatures provided by <code>VK_EXT_descriptor_indexing</code>, promoted …\nReturn the instance extension names wgpu would like to …\nDestroys the semaphores.\nThe physical device features to enable. You may enable …\nSafety\nThe intersection of a source flags value with the …\nA pool of discarded command buffers.\nGet a flags value with all bits unset.\nIf set, the end of the next render/compute pass will write …\nIndicates the cpu-side usage of this semaphore has …\nIndicates the cpu-side usage of this semaphore has …\nSorted list of entries.\nVulkan entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe extensions to enable for the device. You must not …\nThe extensions to enable for the instance. You must not …\nWhich image this semaphore set is used for.\nA pool of available command buffers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nSafety\nSafety\nSafety\nGet the next acquire semaphore that should be used with …\nReturn the semaphore that commands drawing to this image …\nReturn the highest signalled <code>FenceValue</code> for <code>self</code>.\nReturns <code>crate::DeviceError::Lost</code> or panics if the …\nReturns <code>crate::DeviceError::OutOfMemory</code>.\nGet the set of present semaphores that should be used with …\nReturn the semaphores that a presentation of this image …\nReturn the semaphore that the next submission that writes …\nReturns <code>crate::DeviceError::Unexpected</code> or panics if the …\nIf the OBS layer is present. OBS never increments the …\nReturns the raw texture view, along with its identity.\nFeatures provided by <code>VK_EXT_image_robustness</code>, promoted to …\n<code>Instance::init</code> but with a callback. If you want to add …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe instance API version.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nValidation layer description, from <code>vk::LayerProperties</code>.\nValidation layer specification version, from …\nTrim the internal state of this <code>Fence</code>.\nFeatures proved by <code>VK_KHR_maintenance4</code>, needed for mesh …\nMaps\nMaps\nMaps\nMaps\nMaps\nMaps\nMaps\nFeatures proved by <code>VK_EXT_mesh_shader</code>\nFeatures provided by <code>VK_KHR_multiview</code>, promoted to Vulkan …\nReturns a new unique ID for a resource of type <code>T</code>.\nThe index of the next acquire semaphore to use.\nThe present timing information which will be set in the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSafety:\nCreate a <code>PhysicalDeviceFeatures</code> for opening a logical …\nA pool of semaphores for ordering presentation after …\nThe number of semaphores in <code>present</code> to be signalled for …\nSemaphore sets used between all submissions that write to …\nThe fence value of the last command submission that wrote …\nThe queue create infos for the device. You may add or …\nReturns the queue family index of the device’s internal …\nSafety\nSafety\nSafety\nGet the raw Vulkan swapchain associated with this surface.\nFeatures provided by <code>VK_KHR_ray_query</code>,\nSafety\nThe intersection of a source flags value with the …\nTrue if this adapter advertises the <code>robustBufferAccess</code> …\nTrue if this adapter supports the <code>VK_EXT_robustness2</code> …\nFeatures provided by <code>VK_EXT_robustness2</code>.\nIf this is true, the active renderpass enabled a debug …\nSampler cache for Vulkan backend.\nFeatures provided by <code>VK_KHR_sampler_ycbcr_conversion</code>, …\nDefinition of the <code>SemaphoreList</code> type.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the present timing information which will be used for …\nSet the name of <code>object</code> to <code>name</code>.\nSets the fence value which the next acquire will wait for. …\nFeatures provided by <code>VK_EXT_shader_atomic_float</code>.\nFeatures provided by <code>VK_KHR_shader_atomic_int64</code>, promoted …\nFeatures provided by <code>VK_KHR_shader_float16_int8</code>, promoted …\nFeatures provided by <code>VK_EXT_shader_image_atomic_int64</code>\nTrue if this adapter supports 8-bit integers provided by …\nFeatures provided by <code>VK_KHR_shader_integer_dot_product</code>, …\nTrue if this adapter supports the …\nTrue if the next command submission operating on this …\nThe semaphore the next submission should signal when it …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nFeatures provided by <code>VK_EXT_subgroup_size_control</code>, …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAllocation recycling pool for this encoder.\nSafety\nAs this is used in a hashmap, we need to include the …\nBecause we have cached framebuffers which are not deleted …\nAs above, for texture views.\nFeatures provided by <code>VK_KHR_timeline_semaphore</code>, promoted …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe properties related to the validation layer, if present\nThe semaphore the next submission should wait on before …\nFeatures provided by …\nThe pending fence values have to be ascending.\nFeatures supported by a <code>vk::PhysicalDevice</code> and its …\nVulkan “properties” structures gathered about a …\nFeatures provided by <code>VK_KHR_16bit_storage</code>, promoted to …\nFeatures provided by <code>VK_KHR_acceleration_structure</code>.\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nAdd the members of <code>self</code> into <code>info.enabled_features</code> and its …\nFeatures provided by <code>VK_EXT_texture_compression_astc_hdr</code>, …\nFeatures provided by <code>VK_KHR_buffer_device_address</code>, …\nBasic Vulkan 1.0 features.\nFeatures provided by <code>VK_EXT_descriptor_indexing</code>, promoted …\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nThe device API version.\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nReturns the argument unchanged.\nCreate a <code>PhysicalDeviceFeatures</code> that can be used to create …\nMap <code>requested_features</code> to the list of Vulkan extension …\nFeatures provided by <code>VK_EXT_image_robustness</code>, promoted to …\nCalls <code>U::from(self)</code>.\nFeatures proved by <code>VK_KHR_maintenance4</code>, needed for mesh …\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nFeatures proved by <code>VK_EXT_mesh_shader</code>\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nFeatures provided by <code>VK_KHR_multiview</code>, promoted to Vulkan …\nProperties of the <code>vk::PhysicalDevice</code>, as returned by …\nFeatures provided by <code>VK_KHR_ray_query</code>,\nFeatures provided by <code>VK_EXT_robustness2</code>.\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nFeatures provided by <code>VK_KHR_sampler_ycbcr_conversion</code>, …\nFeatures provided by <code>VK_EXT_shader_atomic_float</code>.\nFeatures provided by <code>VK_KHR_shader_atomic_int64</code>, promoted …\nFeatures provided by <code>VK_KHR_shader_float16_int8</code>, promoted …\nFeatures provided by <code>VK_EXT_shader_image_atomic_int64</code>\nFeatures provided by <code>VK_KHR_shader_integer_dot_product</code>, …\nAdditional <code>vk::PhysicalDevice</code> properties from Vulkan 1.1.\nFeatures provided by <code>VK_EXT_subgroup_size_control</code>, …\nAdditional <code>vk::PhysicalDevice</code> properties from the …\nExtensions supported by the <code>vk::PhysicalDevice</code>, as …\nFeatures provided by <code>VK_KHR_timeline_semaphore</code>, promoted …\nReturn a <code>wgpu_hal::Alignments</code> structure describing this …\nCompute the wgpu <code>Features</code> and <code>DownlevelFlags</code> supported by …\nFeatures provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe usually map unexpected vulkan errors to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEntry in the sampler cache.\nIf the allowed sampler count is above this value, the …\n<code>vk::SamplerCreateInfo</code> is not hashable, so we wrap it in a …\nGlobal sampler cache.\nCreate a sampler, or return an existing one if it already …\nDecrease the reference count of a sampler and destroy it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, the sampler cache is disabled and all samplers …\nMapping from the sampler description to sampler and …\nMaximum number of unique samplers that can be created.\nA list of Vulkan semaphores to signal.\nAdd this list to the semaphores to be signalled by a …\nAppend <code>other</code> to <code>self</code>, leaving <code>other</code> empty.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPad <code>self.values</code> with dummy values for binary semaphores, …\nAdd a binary semaphore to this list.\nAdd a timeline semaphore to this list, to be signalled with\nSemaphores to signal.\nValues for timeline semaphores.")