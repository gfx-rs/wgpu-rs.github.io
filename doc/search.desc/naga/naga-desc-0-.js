searchState.loadedDescShard("naga", 0, "Naga can be used to translate source code written in one …\nWidth of abstract types, in bytes.\nAn arena holding some kind of component (e.g., type, …\nWidth of a boolean type, in bytes.\nHash map that is faster but not resilient to DoS attacks. …\nHash set that is faster but not resilient to DoS attacks. …\nInsertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but …\nInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but …\nA strongly typed reference to an arena item.\nMap of expressions that have associated variable names\nA strongly typed range of handles.\nA human-readable representation for a span, tailored for …\nA source code span, used for error reporting.\nA source code span together with “context”, a …\nAn arena whose elements are guaranteed to be unique.\nWrapper class for <code>Error</code>, augmenting it with a list of …\nThe <code>Arena</code>, <code>UniqueArena</code>, and <code>Handle</code> types.\nBackend functions that export shader <code>Module</code>s into binary …\nCode common to the front and backends for specific …\nValues of this arena.\n<code>DiagnosticFilter</code>s and supporting functionality.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrontend parsers that consume binary and text shaders and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Intermediate Representation shared by all frontends …\nLists of reserved keywords for each shading language with …\nLength in code units (in bytes) of the span.\n1-based line number.\n1-based column in code units (in bytes) of the start of …\n<code>NonMaxU32</code>, a 32-bit type that can represent any value …\n0-based Offset in code units (in bytes) of the start of …\n<code>Module</code> processing functionality.\nSpans for the elements, indexed by handle.\nShader validator.\nAn arena holding some kind of component (e.g., type, …\nAdds a new value to the arena, returning a typed handle.\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>range</code> is valid for this arena.\nClears the arena keeping all allocations\nValues of this arena.\nDrains the arena, returning an iterator over the items …\nFetch a handle to an existing type.\nAdds a value with a custom check for uniqueness: returns a …\nAdds a value with a check for uniqueness, where the check …\nGet a mutable reference to an element in the arena.\nWell-typed indices into <code>Arena</code>s and <code>UniqueArena</code>s.\nThe <code>HandleSet</code> type and associated definitions.\nThe <code>HandleVec</code> type and associated definitions.\nExtracts the inner vector.\nReturns <code>true</code> if the arena contains no elements.\nReturns an iterator over the items stored in this arena, …\nReturns a iterator over the items stored in this arena, …\nReturns an iterator over the items stored in this arena, …\nReturns the current number of items stored in this arena.\nCreate a new arena with no initial capacity allocated.\nWell-typed ranges of <code>Arena</code>s.\nGet the range of handles from a particular number of …\nThe <code>UniqueArena</code> type and supporting definitions.\nA strongly typed reference to an arena item.\nAn unique index in the arena array that a handle points to.\nCheck that <code>depends_on</code> was constructed before <code>self</code> by …\nLike <code>Self::check_dep</code>, except for <code>Iterator</code>s over handle …\nLike <code>Self::check_dep</code>, except for <code>Option</code>al handle values.\nCheck that <code>self</code> is valid within <code>arena</code> using …\nCheck that <code>self</code> is valid within <code>arena</code> using …\nReturns the argument unchanged.\nConvert a <code>usize</code> index into a <code>Handle&lt;T&gt;</code>.\nConvert a <code>usize</code> index into a <code>Handle&lt;T&gt;</code>, without range …\nReturns the index of this handle.\nCalls <code>U::from(self)</code>.\nWrite this handle’s index to <code>formatter</code>, preceded by …\nA set of <code>Handle&lt;T&gt;</code> values.\nAdd all of the handles that can be included in this set.\nReturn an iterator over all handles that could be made …\nThis type is indexed by values of type <code>T</code>.\nRemove all members from <code>self</code>.\nRemove all members from <code>self</code>, and reserve space to hold …\nReturn a new, empty <code>HandleSet</code>, sized to hold handles from …\nReturns the argument unchanged.\nAdd <code>handle</code> to the set.\nAdd handles from <code>iter</code> to the set.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all handles in <code>self</code>.\nBound on indexes of handles stored in this set.\n<code>members[i]</code> is true if the handle with index <code>i</code> is a member.\nReturn a new, empty <code>HandleSet</code>.\nRemoves and returns the numerically largest handle in the …\nRemove <code>handle</code> from the set.\nA <code>Vec</code> indexed by <code>Handle</code>s.\nReturns the argument unchanged.\nInsert a mapping from <code>handle</code> to <code>value</code>.\nCalls <code>U::from(self)</code>.\nA strongly typed range of handles.\nreturn the first and last handles included in <code>self</code>.\nReturns the argument unchanged.\nConstruct a <code>Range</code> that covers the indices in <code>inner</code>.\nReturn a range covering all handles with indices from <code>0</code> to …\nReturn the index range covered by <code>self</code>.\nCalls <code>U::from(self)</code>.\nReturn a range enclosing handles <code>first</code> through <code>last</code>, …\nAn arena whose elements are guaranteed to be unique.\nAssert that <code>handle</code> is valid for this arena.\nClears the arena, keeping all allocations.\nReturns the argument unchanged.\nReturn this arena’s handle for <code>value</code>, if present.\nReturn this arena’s value at <code>handle</code>, if that is a valid …\nReturn the span associated with <code>handle</code>.\nInsert a new value into the arena.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the arena contains no elements.\nReturns an iterator over the items stored in this arena, …\nReturn the current number of items stored in this arena.\nCreate a new arena with no initial capacity allocated.\nReplace an old value with a new value.\nSpans for the elements, indexed by handle.\nA type for displaying expression handles as baking …\nNames of vector components.\nAn <code>EntryPoint</code>, and its index in <code>Module::entry_points</code>.\nA regular function.\nHelper structure that stores data needed when writing the …\nWhether we’re generating an entry point or a regular …\nIndent for backends.\nIndentation level.\nExpressions that need baking.\nSpecifies the values of pipeline-overridable constants in …\nRay flags, for a <code>RayDesc</code>’s <code>flags</code> field.\nThe intersection test to use for ray queries.\nGet a flags value with all known bits set.\nHelper method that generates a <code>NameKey</code> for a function …\nHelper function that returns the string corresponding to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWorkarounds for platform bugs and limitations in switches …\nThe intersection of a source flags value with the …\nBackend for DOT (Graphviz).\nGet a flags value with all bits unset.\nThe expression arena of the current function being written\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nHelper method that generates a <code>NameKey</code> for an external …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nLocate the entry point(s) to write.\nBackend for GLSL (OpenGL Shading Language).\nBackend for HLSL (High-Level Shading Language).\nAnalysis about the function\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the function is an entry point for a …\nWhether all bits in this flags value are unset.\nReturns true if the given expression points to a …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nBackend for MSL (Metal Shading Language).\nHelper method that generates a <code>NameKey</code> for a local in the …\nMap of expressions that have associated variable names\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nHelper method that resolves a type of a given expression.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nBackend for SPIR-V (Standard Portable Intermediate …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current function being written\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBackend for WGSL (WebGPU Shading Language).\nEmit <code>if (continue_variable) { break; }</code>\nEmit <code>if (continue_variable) { continue; }</code>\nUtility for tracking nesting of loops and switches to …\nA micro-IR for code a backend should generate after a …\nCurrently nested in at least one <code>Loop</code> statement.\nA summary of the code surrounding a statement.\nCurrently nested in at least one <code>Switch</code> that may need to …\nResets internal state.\nDetermine what to generate for a <code>Continue</code> statement.\nUpdates internal state to record entering a <code>Loop</code> statement.\nUpdates internal state to record entering a <code>Switch</code> …\nUpdates internal state to record exiting a <code>Loop</code> statement.\nUpdate internal state to record leaving a <code>Switch</code> statement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet if we’ve generated code for a <code>Continue</code> statement …\nset39 color scheme from …\nIdentifier used to address a graph node\nConfiguration options for the dot backend\nStores information about the graph of statements\nStores the target nodes for control flow statements\nAdds a new block to the statement graph, returning the …\nThe node, if some, where break operations will land\nList of function call by statement node\nOnly emit function bodies\nThe node, if some, where continue operations will land\nList of dependency relationships between a statement node …\nList of expression emitted by statement node\nList of edges of the control flow, the items are defined as\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of implicit edges of the control flow, used for jump …\nList of node names\nWrite shader module to a <code>String</code>.\nFlip output Y and extend Z from (0, 1) to (-1, 1).\nShorthand result used internally by the backend\nBinary operation with a different logic on the GLSL side.\nMapping between resources and bindings.\nThe suffix of the variable that will hold the calculated …\nSupports ARB_shader_draw_parameters on the host, which …\n<code>core</code> GLSL.\n<code>es</code> GLSL.\nThe entry point couldn’t be found.\nContains the error value\nA GLSL compilation error.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nStructure used to encode additions to GLSL that aren’t …\n<code>crate::Sampling::First</code> is unsupported.\nA error occurred while writing to the output.\nInclude unused global variables, constants and functions. …\nHelper structure that generates a number\nA image was used with multiple samplers, which isn’t …\nThe specified <code>Version</code> doesn’t have all required <code>Features</code>.\nGLSL <code>%</code> is SPIR-V <code>OpUMod/OpSMod</code> and <code>mod()</code> is <code>OpFMod</code>, but …\n<code>AddressSpace::PushConstant</code> was used more than once in the …\nContains the success value\nConfiguration used in the <code>Writer</code>.\nAny plain operation. No additional logic required.\nA subset of options meant to be changed per pipeline.\nAll information to bind a single uniform value to the …\nReflection info for texture mappings and uniforms.\nList of supported <code>core</code> GLSL versions.\nList of supported <code>es</code> GLSL versions.\nStructure returned by <code>glsl_scalar</code>\nSupports GL_EXT_texture_shadow_lod on the host, which …\nMapping between a texture and its sampler, if it exists.\nA call was made to an unsupported external.\nA scalar with an unsupported width was requested.\nHelper wrapper used to get a name for a varying\nAssorted options needed for generating varyings.\nVector comparison should use the function like …\nVector component wise operation; used to polyfill …\nA GLSL version.\nThe specified <code>Version</code> isn’t supported.\nWriter responsible for all code generation.\nConfiguration flags for the <code>Writer</code>.\nGL uniform name for the item. This name is the same as if …\nGet a flags value with all known bits set.\nMap of resources association to binding locations.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA generator for unique block numbers.\nNumber of user-defined clip planes. Only non-zero for …\nNumber of user-defined clip planes. Only applicable to …\nHelper method used to produce the reflection info that’s …\nHelper method that searches the module for all the needed …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nInformation about nesting of loops and switches.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe selected entry point.\nThe name of the entry point.\nThe index of the selected entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nContains the features related code and the features …\nFeatures manager used to store all the needed features and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe name of the scalar type\nGenerates a number that’s guaranteed to be unique for …\nHelper method used to get a name for a global\nHelper function that returns the glsl variable name for a …\nHelper function that returns the glsl dimension string of …\nHelper function that returns the string corresponding to …\nReturn the GLSL auxiliary qualifier for the given sampling …\nHelper function that returns scalar related strings\nHelper function that returns the glsl storage format …\nHelper function that returns the string corresponding to …\nThe index which can be used for dual source blending. This …\nThe module analysis.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if self is <code>Version::Embedded</code> (i.e. is a es …\nChecks the list of currently supported versions and …\nReturns true if targeting WebGL\nYield a set of contained flags values.\nYield a set of contained named flags values.\nContains a constant with a slice of all the reserved …\nThe location of the global. This corresponds to …\nThe module being written.\nHow many views to render to, if doing multiview rendering.\nHow many views to render to, if doing multiview rendering.\nSet of expressions that have associated temporary …\nA map with all the names needed for writing the module …\nSet of expressions that need to be baked to avoid …\nCreates a new <code>Writer</code> instance.\nCreate a new gles version\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset in the push constant memory block this uniform …\nUser defined configuration to be used.\nThe output writer.\nThe bound checking policies to be used\nThe prefix used to compose other types\nList of push constant items in the shader.\nA map with the names of global variables needed for …\nThe intersection of a source flags value with the …\nHandle to the associated sampler global variable, if it …\nHelper method that checks the <code>Features</code> needed by a scalar\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nChecks if the version supports all of the explicit layouts:\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHandle to the image global variable.\nMapping between texture names and variables/samplers.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nType of the uniform. This will only ever be a scalar, …\nMapping between uniform variables and names.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper method used to find which expressions of a given …\nMapping of varying variables to their location. Needed for …\nMapping between names and attribute locations.\nThe GLSL version to be used.\nWrites the <code>Module</code> as glsl to the output\nHelper function to write the local holding the clamped lod\nWrite a const expression.\nIssue a control barrier.\nHelper method used to output a dot product as an …\nHelper method to write expressions\nHelper method used to write functions (both entry points …\nHelper method used to write non images/sampler globals\nHelper method used to write global constants\nHelper method used by Self::write_global to write just the …\nHelper method used to write a name for a global without …\nHelper method to write the <code>ImageAtomic</code> statement\nHelper method for writing an <code>ImageLoad</code> expression.\nHelper method to write the <code>ImageStore</code> statement\nHelper method to write a image type\nWrite an interface block for a single Naga global.\nIssue a memory barrier.\nWrite <code>Expression</code> variants that can occur in both runtime …\nWrite a list of comma separated <code>T</code> values using a writer …\nHelper method used to write statements\nHelper function that return the glsl storage access string …\nHelper method used to write structs\nHelper method to write the coordinate vector for image …\nHelper method used to write non image/sampler types\nHelper method used to write value types\nWrite a GLSL global that will carry a Naga entry point’s …\nHelper function that write string with zero initialization …\nHelper function that write string with default zero …\nConfiguration flags for the <code>Writer</code>.\nShould workgroup variables be zero initialized (by …\nBuffer address space support.\n8 byte floats.\nDual source blending\nArrays with a dynamic length.\nMore image formats.\nStructure used to encode additions to GLSL that aren’t …\nHelper structure used to store the required <code>Features</code> …\nImage load and early depth tests.\nImage size query\nInstance index\nInterpolation and auxiliary qualifiers.\nSample ID.\nSubgroup operations\nImage atomics\nTexture levels query\nTexture samples query\nSample specific LODs of cube / array shadow textures\nGet a flags value with all known bits set.\nGet the underlying bits value.\nChecks that all required <code>Features</code> are available for the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nChecks if the list of features <code>Features</code> contains the …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new <code>FeaturesManager</code> instance\nThe intersection of a source flags value with the …\nAdds to the list of required <code>Features</code>\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper method used to write all needed extensions\nThe above set of reserved keywords, turned into a cached …\nShorthand result used internally by the backend\nDirect3D 12 binding information for a global variable.\nContains the error value\nHLSL binding information for a Naga <code>External</code> image global …\nA fragment entry point to be considered when generating …\nBindTarget for dynamic storage buffer offsets\nContains the success value\nConfiguration used in the <code>Writer</code>.\nA subset of options that are meant to be changed per …\nReflection info for entry point names.\nA HLSL shader model version.\nIf the binding is an unsized binding array, this overrides …\nHLSL binding information for each Naga global variable.\nThis is the index in the buffer at …\nBind target for dynamic storage buffer offsets\nHelper to emit the shared tail of an HLSL atomic call …\nThe entry point to write.\nInformation about entry point arguments and result types.\nMapping of the entry point names.\nHLSL binding information for <code>External</code> image global …\nDon’t panic on missing bindings, instead generate any …\nSet <code>temp_access_chain</code> to compute the byte offset of …\nIf set, loops will have code injected into them, forcing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates statements to be inserted immediately before and …\nHelpers for the hlsl backend\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of expressions that have associated temporary variables\nReturns <code>None</code> if the entry point with the provided name can…\nHLSL backend options\nHLSL binding information for a buffer holding the sampling …\nPer-stage backend options\nHLSL binding information for the individual plane textures.\nHLSL binding information for the <code>PushConstant</code> global, if …\nFor regular bindings this is the register number.\nThis is a hint that we need to restrict indexing of …\nShould we restrict indexing of vectors, matrices and …\nFind the <code>BindingArraySamplerInfo</code> from an expression so …\nMapping of each bind group’s sampler index buffer to a …\nHLSL binding information for the sampler heap and …\nIf true, the sampler heaps have been written out.\nThe hlsl shader model to be used\nAdd special constants to <code>SV_VertexIndex</code> and …\nGenerating accesses to <code>ByteAddressBuffer</code> contents.\nA reference to some part of a global variable, lowered to …\nHelper method used to find which expressions of a given …\nHelper function used by …\nHelper function that write default zero initialization\nWrite an entry point preface that initializes the …\nFlatten all entry point arguments into a single struct. …\nWrites special interface structures for an entry point. …\nFlatten all entry point results into a single struct. This …\nHelper method to write expressions\nHelper method used to write functions\nHelper method used to write global variables\nHelper method used to write global constants\nWrite the declarations for an external texture global …\nHelper method used to write global/structs non …\nWrites the conversion from a single length storage texture …\nWrites out the sampler heap declarations if they haven’t …\nWrite functions to create special types.\nHelper method used to write statements\nEmit code to access a <code>Storage</code> global’s component.\nHelper function to write down the Store operation on a …\nHelper method used to write structs\nHelper method used to write switches\nHelper method used to write non image/sampler types\nHelper method used to write value types\nHelper function that write wrapped function for …\nHelper function that write wrapped function for …\nHelper function that writes wrapped functions for …\nHelper function that writes various wrapped functions\nHelper function that write wrapped function for …\nWrites out the sampler index buffer declaration if it hasn…\nWrites a function used to get a matCx2 from within a …\nWrites a function used to set a matCx2 from within a …\nWrites a function used to set a float on a matCx2 from …\nWrites a function used to set a vec2 on a matCx2 from …\nHelper function that write wrapped function for …\nHelper function that writes zero value wrapped functions\nShould workgroup variables be zero initialized (by …\nHLSL backend requires its own <code>ImageQuery</code> enum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe above set of reserved keywords, turned into a cached …\nScale <code>value</code> by <code>stride</code>, and add that to the current byte …\nAdd the given byte offset. This is used for struct …\nOne step in accessing a <code>Storage</code> global’s component or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation for how to generate a <code>binding_array&lt;sampler&gt;</code> …\nStructure contains information required for generating …\nName of the fake EP argument that contains the struct with …\nVariable name of the base index <em>into</em> the sampler index …\nIf <code>base</code> is an access chain of the form <code>mat</code>, <code>mat[col]</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSimpler version of get_inner_matrix_of_global_uniform that …\nReturns the matrix data if the access chain starting at …\nReturns the matrix data if the access chain starting at …\nIf <code>Some</code>, the input of an entry point is gathered in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMembers of generated structure\nIf <code>Some</code>, the output of an entry point is flattened. The …\nVariable name of the sampler heap\nVariable name of the sampler index buffer\nGenerated structure name\nA mapping of vertex buffers and their attributes to shader …\nBinding information for a Naga <code>External</code> image global …\nOne half-precision float (no Rust equiv). <code>f32</code> in shaders.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nInput to the fragment shader.\nOutput from the fragment shader.\nPoints in the MSL code where we might emit a pipeline …\nA subset of options that are meant to be changed per …\nOne signed short (u16). <code>i32</code> in shaders.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed byte (i8). <code>i32</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed short (i16). [-32767, 32767] converted to float …\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nOne signed byte (i8). [-127, 127] converted to float [-1, 1…\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nInformation about a translated module that is required for …\nOne unsigned short (u16). <code>u32</code> in shaders.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned byte (u8). <code>u32</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nCompute shader input or output.\nThree unsigned 10-bit integers and one 2-bit integer, …\nOne unsigned short (u16). [0, 65535] converted to float […\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nOne unsigned byte (u8). [0, 255] converted to float [0, 1] …\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\nFour unsigned 8-bit integers, packed into a 32-bit integer …\nA description of a vertex buffer with all the information …\nDefines how to advance the data in vertex buffers.\nCorresponds to WebGPU <code>GPUVertexFormat</code>.\nInput to the vertex shader.\nOutput from the vertex shader.\nAllow <code>BuiltIn::PointSize</code> and inject it if doesn’t exist.\nVec of the attributes within the structure\nBounds checking policies.\nThe entry point to write.\nMapping of the entry point names. Each item in the array …\nDon’t panic on missing bindings, instead generate …\nIf set, loops will have code injected into them, forcing …\nFormat code to help us unpack the attribute into the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShader location associated with this buffer\nSamplers to be inlined into the code.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Major, Minor) target version of the Metal Shading …\nSet of expressions that need to be baked to avoid …\nOffset in bytes from start of vertex buffer structure\nMap of entry-point resources, indexed by entry point …\nShader location associated with this attribute\nThe slot of a buffer that contains an array of <code>u32</code>, one …\nMake it possible to link different stages via SPIRV-Cross.\nVertex buffer step mode\nSize of the structure in bytes\nSet of (struct type, struct field index) denoting which …\nvertex_buffer_mappings are used during shader translation …\nIf set, when generating the Metal vertex shader, transform …\nShould workgroup variables be zero initialized (by …\nThe above set of reserved keywords, turned into a cached …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor some reason, Metal does not let you have …\nWrapper for generating <code>struct _mslBufferSizes</code> member names …\nShorthand result used internally by the backend\nPrefix for cached clamped level-of-detail values for …\nWrapper for identifier names for clamped level-of-detail …\nName of the struct that is declared to wrap the 3 textures …\nContains the error value\nA level of detail argument.\nContains the success value\nPrefix for reinterpreted expressions using <code>as_type&lt;T&gt;(...)</code>.\nWrapper for reinterpreted variables using …\nValues needed to select a particular texel for <code>ImageLoad</code> …\nSee docs for <code>proc::index::access_needs_check</code>.\nSee docs for <code>proc::index::bounds_check_iter</code>.\nFinishes writing and returns the output.\nSee <code>Writer::gen_force_bounded_loop_statements</code> for details.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates statements to be inserted immediately before and …\nThe set of expressions used as indices in <code>ReadZeroSkipWrite</code>…\nReturn true if calls to <code>image</code>’s <code>read</code> and <code>write</code> methods …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of expressions that need to be baked to avoid …\nCreates a new <code>Writer</code> instance.\nReturn the name key for a local variable used by …\nSee docs for <code>proc::index::oob_local_types</code>.\nWrite the access chain <code>chain</code>.\nEmits code for a binary operation, using the provided …\nEmits code for an expression using the provided callback, …\nEmit an index bounds check condition for <code>chain</code>, if …\nCache a clamped level of detail value, if necessary.\nConvert the arguments of <code>Dot4{I, U}Packed</code> to …\nWrite the definition for the <code>DefaultConstructible</code> class.\nEmit code for the arithmetic expression of the dot product.\nWrite the maximum valid index of the dynamically sized …\nEmit code for the expression <code>expr_handle</code>.\nWrite an expression that is true if the given image access …\nWrite a <code>GuardedIndex</code> as a Metal expression.\nEmit code for the isign expression.\nWrites the local variables of the given function, as well …\nWrite the Metal name for a Naga numeric type: scalar, …\nEmit code for the WGSL functions <code>pack4x{I, U}8[Clamp]</code>.\nGeneral function for writing restricted image indexes.\nWrite a <code>[]</code>-style access of <code>base</code> by <code>index</code>.\nUsed by expressions like Swizzle and Binary since they …\nSet of (struct type, struct field index) denoting which …\nHelper method used to find which expressions of a given …\nInitializing workgroup variables is more tricky for Metal …\nHelper function used by <code>Self::write_wrapped_image_load</code> and …\nWrites all named constants\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplace every expression handle in <code>block</code> with its …\nReplace every expression handle in <code>expr</code> with its …\nReplace every expression handle in <code>stmt</code> with its …\nAdjust <code>Emit</code> statements in <code>block</code> to skip <code>needs_pre_emit</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReplace all override expressions in <code>function</code> with …\nAdd a <code>Constant</code> to <code>module</code> for the override <code>old_h</code>.\nCompact <code>module</code> and replace all overrides with constants.\nFlip Y coordinate of <code>BuiltIn::Position</code> output.\nA SPIR-V block to which we are still adding instructions.\nGeneral information needed to emit SPIR-V for Naga …\nClamp <code>BuiltIn::FragDepth</code> output between 0 and 1.\nA map from evaluated <code>Expression</code>s to their SPIR-V ids.\nSPIR-V operand kind: Capability\nInclude debug labels for everything.\nTracks the expressions for which the backend emits the …\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nThe SPIR-V representation of a <code>crate::GlobalVariable</code>.\nFlags corresponding to the boolean(-ish) parameters to …\nEmit <code>OpName</code> for input/output locations.\nCharacteristics of a SPIR-V <code>OpTypeImage</code> type.\nA SPIR-V type constructed during code generation.\nA type encountered during SPIR-V generation.\nVia <code>VK_KHR_zero_initialize_workgroup_memory</code> or Vulkan 1.3\nA numeric type.\nA numeric type, for use in <code>LocalType</code>.\nVia assignments + barrier\nSPIR-V operand kind: SourceLanguage\nA SPIR-V block that ends with a termination instruction.\nKey used to look up an operation which we have wrapped in …\nThe SPIR-V id of a pointer to this variable’s Naga IR …\nA map taking each expression to the number of <code>Access</code> and …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf the binding is an unsized binding array, this overrides …\nMap of resources to information about the binding.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nImplementations for <code>BlockContext</code> methods.\nHow should generate code handle array, vector, matrix, or …\nCache an expression for a value.\nSPIR-V ids for expressions we’ve evaluated.\nIf given, the set of capabilities modules are allowed to …\nThe set of capabilities modules are permitted to use.\nThe set of capabilities used by this module.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIndexed by const-expression handle indexes\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWrite the necessary decorations for a struct member.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nTracks the constness of <code>Expression</code>s residing in …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nAdd a condition to a chain of bounds checks.\nThe set of spirv extensions used.\nThis module provides functionality for polyfilling <code>f16</code> …\nDon’t panic on missing bindings. Instead use fake values …\nConfiguration flags for the writer.\nIf set, loops will have code injected into them, forcing …\nList of local variables used as a counters to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConstruct a <code>LocalImageType</code> from the fields of a …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nInformation module validation produced about <code>ir_function</code>.\nThe <code>spv::Function</code> to which we are contributing SPIR-V …\nReturn the set of capabilities the last module written …\nReturn a SPIR-V type for a pointer to <code>resolution</code>.\nThe loaded value of a <code>AddressSpace::Handle</code> global variable.\nGenerating SPIR-V for image operations.\nBounds-checking for SPIR-V output.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nActual instruction of the argument.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nF16 I/O polyfill manager for handling <code>f16</code> input/output …\nThe <code>Function</code> for which we’re generating code.\nThe <code>Module</code> for which we’re generating code.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns <code>(major, minor)</code> of the SPIR-V language version.\nReturns <code>(major, minor)</code>.\n(Major, Minor) target version of the SPIR-V.\nLoad an IO variable, converting from <code>f32</code> to <code>f16</code> if …\nReturn <code>inner</code> as a <code>LocalType</code>, if that’s possible.\nGenerate an access to a spilled temporary, if necessary.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGenerating SPIR-V for ray query operations.\nReusing collections’ previous allocations.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIndicate that the code requires all of the listed …\nIndicate that the code requires any one of the listed …\nReset <code>Writer</code> to its initial state, retaining any …\nPrepare <code>self</code> for use within a single function.\nResolve the <code>BindingInfo</code> for a <code>crate::ResourceBinding</code> from …\nGenerate code to restrict <code>input</code> to fall between zero and …\nGenerate SPIR-V conditional structures.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nA set of expressions that are either in <code>spilled_composites</code> …\nA map from a Naga expression to the temporary SPIR-V …\nStore an IO variable, converting from <code>f16</code> to <code>f32</code> if …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe <code>Writer</code>’s temporary vector, for convenience.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIndicate that the code uses the given extension.\nWhether to use the <code>StorageInputOutput16</code> capability for <code>f16</code> …\nThe SPIR-V id of the <code>OpVariable</code> that declares the global.\nOperations which have been wrapped in a helper function. …\nBuild an <code>OpAccessChain</code> instruction.\nCompute a single index operand to an <code>OpAccessChain</code> …\nHelper which focuses on generating the <code>As</code> expressions and …\nGenerate one or more SPIR-V blocks for <code>naga_block</code>.\nEmit code for bounds checks for an array, vector, or …\nEmit a conditional load for …\nWrite instructions to query the size of an image.\nGenerate a vector or scalar ‘one’ for arithmetic on …\nBuild the instructions for the arithmetic expression of a …\nGenerates code to ensure that a loop is bounded. Should be …\nExtend image coordinates with an array index, if necessary.\nGenerate code for an <code>ImageLoad</code> expression.\nGenerate code for an <code>ImageQuery</code> expression.\nGenerate code for an <code>ImageSample</code> expression.\nWrite an index bounds comparison to <code>block</code>, if needed.\nBuild the instructions for matrix - matrix column …\nEmit code for <code>pack4x{I,U}8[Clamp]</code> if capability “Int8” …\nEmit code for <code>pack4x{I,U}8[Clamp]</code> if capability “Int8” …\nWrite code to restrict coordinates for an image reference.\nRestrict an index to be in range for a vector, matrix, or …\nEmit code to compute the length of a run-time array.\nCompute the length of a subscriptable value.\nCompute the maximum valid index of a subscriptable value.\nEmit code for <code>unpack4x{I,U}8</code> if capability “Int8” is …\nEmit code for <code>unpack4x{I,U}8</code> if capability “Int8” is …\nGenerate an <code>OpVariable</code> for one value in an <code>EntryPoint</code>’s …\nEmit code to subscript a vector by value with a computed …\nBuild the instructions for vector - scalar multiplication\nWrite a SPIR-V function that performs the operator <code>op</code> with …\nEmits code for any wrapper functions required by the …\nThe writer handling the module to which this code belongs.\nDictates the way workgroup variables should be zero …\nHow to derive the type of <code>OpAccessChain</code> instructions from …\nThe termination statement to be added to the end of the …\nWhat code generation did with a provided <code>BlockExit</code> value.\nGenerates an OpBranch to the specified block\nTranslates a loop <code>break if</code> into an <code>OpBranchConditional</code> to …\nThe access expression must be conditional on the value of …\nThe generated code did not use the provided <code>BlockExit</code> …\nThe results of emitting code for a left-hand-side …\nThe SPIR-V type should be an <code>OpPointer</code> to the direct …\nNo adjustment needed: the SPIR-V type should be the direct …\nThe pointer to the expression’s value is available, as …\nGenerates an OpReturn (void return)\nThe generated code used the provided <code>BlockExit</code> value. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe condition of the <code>break if</code>\nThe loop header block id\nThe branch target block\nManages <code>f16</code> I/O polyfill state and operations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHACK: this is taken from std unstable, remove it when std…\nReturn true if the global requires a type decorated with …\nsplit a string into chunks and keep utf8 valid\nA trait for image access (load or store) code generators.\nInformation about a vector of coordinates.\nTexel access information for an <code>ImageLoad</code> expression.\nThe Rust type that represents SPIR-V values and types for …\nTexel access information for a <code>Store</code> statement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrite an image access to <code>block</code>.\nWrite an instruction to access a given texel of this image.\nThe id of the image being accessed.\nThe id of the image being written to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe specific opcode we’ll use to perform the fetch. …\nConstruct the SPIR-V ‘zero’ value to be returned for …\nStores don’t generate any value, so this just returns <code>()</code>.\nReturn the SPIR-V type of the value produced by the code …\nStores don’t generate any value, so this just returns <code>()</code>.\nThe number of components in <code>value</code>, if it is a vector, or …\nThe SPIR-V id of the type of <code>value</code>.\nThe type id produced by the actual image access …\nThe SPIR-V id of the combined coordinate/index vector …\nThe value we’re going to write to the texel.\nThe results of performing a bounds check.\nThe given instruction computes the index to be used.\nThe value is computed by the instruction with the given id.\nThe given instruction computes a boolean condition which …\nThe value is known at shader translation time.\nThe index is statically known and in bounds, with the …\nA value that we either know at translation time, or need …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe access should only be permitted if this value is true.\nThe access should use this index value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA value that can be reset to its initial state, retaining …\nClear <code>self</code>, retaining its current memory allocations.\nA trait to help <code>Selection</code> manage any number of merged …\nA private struct recording what we know about the …\nThe block pointer we’re emitting code into.\nEmit an unconditional branch to the merge block, and …\nReturns the argument unchanged.\nBranch to a successor block if <code>cond</code> is true, otherwise …\nCalls <code>U::from(self)</code>.\nReturn the id of the merge block, writing a merge …\nThe label of the selection construct’s merge block, or …\nThe types of the values in each element of <code>values</code>.\nStart a new selection construct.\nA set of <code>(VALUES, PARENT)</code> pairs, used to build <code>OpPhi</code> …\nWrite OpPhi instructions for the given set of predecessors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nProduce an <code>Unsupported</code> error for <code>value</code>.\nWhat kind of unsupported thing this is: interpolation, …\nThe debug form of the Naga IR value that this backend can…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWGSL attribute\nShorthand result used internally by the backend\nAlways annotate the type information instead of inferring.\nContains the error value\nThe WGSL form that <code>write_expr_with_indirection</code> should use …\nContains the success value\nRender pointer-construction expressions as WGSL <code>ptr</code>-typed …\nRender pointer-construction expressions as WGSL …\nGet a flags value with all known bits set.\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nDetermine if <code>ty</code> is the Naga IR presentation of a WGSL …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn the sort of indirection that <code>expr</code>’s plain form …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper method to write a attribute\nHelper method which writes all the <code>enable</code> declarations …\nWrite the ordinary WGSL form of <code>expr</code>.\nWrite the ‘plain form’ of <code>expr</code>.\nWrite <code>expr</code> as a WGSL expression with the requested …\nHelper method used to write functions\nHelper method used to write global variables\nHelper method used to write global constants\nHelper method used to write statements\nHelper method used to write structs Write the full …\nA wrapper for displaying Naga IR terms in debugging output.\nA wrapper for displaying Naga IR terms in diagnostic …\nDisplaying Naga IR terms in debugging output.\nDisplaying Naga IR terms in diagnostic output.\nFormat this type using <code>core::fmt::Debug</code>.\nFormat this type using <code>core::fmt::Debug</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerating names for predeclared types.\nHelper function that returns the string corresponding to …\nCode shared between the WGSL front and back ends.\nA wrapper for displaying Naga IR terms in debugging output.\nFormat this type using <code>core::fmt::Debug</code>.\nFormat this type using <code>core::fmt::Debug</code>.\nA wrapper for displaying Naga IR terms in diagnostic …\nWhat kind of WGSL thing <code>Self</code> represents.\nTypes that can return the WGSL source representation of …\nTypes that may be able to return the WGSL source …\nA context for printing Naga IR types as WGSL.\nReturn the WGSL address space and access mode strings for …\nWGSL diagnostic filters and severities.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the <code>Type</code> referred to by <code>handle</code>.\nGenerating WGSL source code for Naga IR types.\nReturn WGSL source code representation of <code>self</code>.\nReturn the WGSL form of <code>self</code> as appropriate for …\nReturn the WGSL form of <code>self</code> as a <code>&#39;static</code> string.\nReturn the name to be used for the type referred to by …\nCode for formatting Naga IR types as WGSL source code.\nWrite a <code>TypeInner</code> that has no representation as WGSL …\nWrite a <code>Scalar</code> that has no representation as WGSL source, …\nWrite the WGSL form of <code>override</code> to <code>out</code>.\nWrite the <code>Scalar</code> <code>scalar</code> as a WGSL type.\nWrite the type <code>ty</code> as it would appear in a value’s …\nWrite the <code>TypeInner</code> <code>inner</code> as it would appear in a value’…\nWrite the <code>TypeResolution</code> <code>resolution</code> as a WGSL type.\nWrite a <code>TypeInner::Struct</code> for which we are unable to find …\nWhat kind of WGSL thing <code>Self</code> represents.\nTypes that can return the WGSL source representation of …\nTypes that may be able to return the WGSL source …\nReturn the WGSL address space and access mode strings for …\nReturn WGSL source code representation of <code>self</code>.\nReturn the WGSL form of <code>self</code> as appropriate for …\nReturn the WGSL form of <code>self</code> as a <code>&#39;static</code> string.\nA context for printing Naga IR types as WGSL.\nError type returned by <code>try_write_type_inner</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the <code>Type</code> referred to by <code>handle</code>.\nReturn the name to be used for the type referred to by …\nWrite a <code>TypeInner</code> that has no representation as WGSL …\nWrite a <code>Scalar</code> that has no representation as WGSL source, …\nWrite the WGSL form of <code>override</code> to <code>out</code>.\nWrite the <code>Scalar</code> <code>scalar</code> as a WGSL type.\nWrite the type <code>ty</code> as it would appear in a value’s …\nWrite the <code>TypeInner</code> <code>inner</code> as it would appear in a value’…\nWrite the <code>TypeResolution</code> <code>resolution</code> as a WGSL type.\nWrite a <code>TypeInner::Struct</code> for which we are unable to find …\nConfiguration option for <code>compact</code>. See <code>compact</code> for details.\nAdjust statements in the body of <code>function</code>.\nFix up all handles in <code>expr</code>.\nRemove most unused objects from <code>module</code>, which must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe subset of functions in <code>functions_used</code> that have not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTraverse types and global expressions in tandem to …\nThe used map for <code>constants</code>.\nThe arena in which we are currently tracing expressions.\nThe used set for <code>arena</code>.\nReturns the argument unchanged.\nThe used set for the module’s <code>global_expressions</code> arena.\nThe used map for global variables.\nCalls <code>U::from(self)</code>.\nThe used map for <code>overrides</code>.\nPropagate usage through <code>self.expressions</code>, starting with …\nThe used map for <code>types</code>.\nFunction-local expressions used.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA map keyed by handles.\nReturn the counterpart to <code>old</code> in the compacted module.\nLike <code>adjust</code>, but for optional handles.\nShrink <code>range</code> to include only used handles.\nThis type is indexed by values of type <code>T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe indices assigned to handles in the compacted module.\nReturn the counterpart to <code>old</code> in the compacted module.\nReturn true if <code>old</code> is used in the compacted module.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn error returned by <code>DiagnosticFilterMap::add</code> when it …\nA filtering rule that modifies how diagnostics are emitted …\nA map from diagnostic filters to their severity and span.\nRepresents a single parent-linking node in a tree of …\nA filterable triggering rule in a <code>DiagnosticFilter</code>.\nUse this for directives in WGSL.\nA severity set on a <code>DiagnosticFilter</code>.\nDetermines whether <code>DiagnosticFilterMap::add</code> should …\nA filterable triggering rule in a <code>DiagnosticFilter</code>.\nUse this for attributes in WGSL.\nAdd the given <code>diagnostic_filter</code> parsed at the given <code>span</code> …\nThe default severity associated with this triggering rule.\n<code>Display</code> this rule’s identifiers in WGSL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a sentinel word in WGSL into its associated …\nConvert from a sentinel word in WGSL into its associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWere any rules specified?\nChecks whether this severity is <code>Self::Error</code>.\nFinds the most specific filter rule applicable to …\nReturns the spans of all contained rules.\nMaps this <code>StandardFilterableTriggeringRule</code> into the …\nThis trait describes the behavior of writers that support …\nThis trait describes the behavior of writers that support …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if the underlying writer must …\nReturns true if and only if the underlying writer must …\nReset the current color settings to their original …\nReset the current color settings to their original …\nSet the color settings of the writer.\nSet the color settings of the writer.\nSet the current hyperlink of the writer.\nSet the current hyperlink of the writer.\nThe source code of the shader.\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nReturns true if and only if the underlying writer supports …\nType representing a lexical scope, associating a name to a …\nStructure responsible for managing variable lookups and …\nA table of types for an <code>Arena&lt;Expression&gt;</code>.\nAdds a new variable to the current scope.\nAdds a new variable to the root scope.\nUpgrade the types of scalars observed to be accessed as …\nLimit of the <code>scopes</code> stack (exclusive). By using a separate …\nConstructs a new symbol table with a root scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrontend for GLSL (OpenGL Shading Language).\nGrow this typifier until it contains a type for <code>expr_handle</code>…\nInterpolation defaults.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecompute the type resolution for <code>expr_handle</code>.\nPerform a lookup for a variable named <code>name</code>.\nRemoves the current lexical scope and all its variables\nAdds a new lexical scope.\nAdd an expression’s type to an <code>Arena&lt;Type&gt;</code>.\nStack of lexical scopes. Not all scopes are active; see …\nFrontend for SPIR-V (Standard Portable Intermediate …\nType generators.\nFrontend for WGSL (WebGPU Shading Language).\nStruct fields that we’ve accessed using atomic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal variables that we’ve accessed using atomic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a type equivalent to <code>ty</code>, but with <code>Scalar</code> leaves …\nA map from old types to their upgraded versions.\nA boolean literal was expected.\nThe <code>core</code> profile, default when no profile is specified.\nWhilst parsing as encountered an unexpected EOF.\nThe end of file was expected.\nContains the error value\nError returned during shader parsing.\nInformation about the cause of an error.\nOne of the expected tokens returned in <code>InvalidToken</code>.\nA float literal was expected.\nThe <code>Frontend</code> is the central structure of the GLSL frontend.\n<code>highp</code> precision\nAn identifier was expected.\nAn integer literal was expected.\nThe parser entered an illegal state and exited\nThe shader specified an unsupported or invalid profile.\nWhilst parsing an unexpected token was encountered.\nThe shader requested an unsupported or invalid version.\n<code>lowp</code> precision\n<code>mediump</code> precision\nA <code>glsl</code> memory qualifier such as <code>writeonly</code>\nA specific feature is not yet implemented.\nContains the success value\nPer-shader options passed to <code>parse</code>.\nA collection of errors returned during shader parsing.\nA precision hint used in GLSL declarations.\nAn error was returned by the preprocessor.\nThe GLSL profile used by a shader.\nA semantic error was detected in the shader.\nAdditional information about the GLSL shader.\nA specific token was expected.\nA token passed from the lexing used in the parsing.\nA type was expected.\nA reference to a non existent member of a type was made.\nAn unknown layout qualifier was used.\nA reference to a type that wasn’t declared was used.\nA reference to a variable that wasn’t declared was used.\nUnsupported matrix of the form f16matCxR\nUnsupported matrix of the form matCx2\nA variable with the same name already exists in the …\nAdds a builtin and returns a variable reference to it\nCreate a Naga <code>EntryPoint</code> that calls the GLSL <code>main</code> function.\nHelper function for texture calls, splits the vector …\nPreprocessor definitions to be used, akin to having\nWhether or not early fragment tests where requested by the …\nThe shader can request extensions via the <code>#extension</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds the information about the error itself.\nHolds information about the range of the source code where …\nReturns additional information about the parsed shader …\nModule responsible for calculating the offset and span for …\nParses a shader either outputting a shader <code>Module</code> or a …\nProcesses a function call argument that appears in place …\nThe GLSL profile specified in the shader through the use …\nThe shader stage in the pipeline.\nThe shader stage in the pipeline, passed to the <code>parse</code> …\nThe GLSL version specified in the shader through the use …\nThe workgroup size for compute shaders, defaults to <code>[1; 3]</code> …\nTracks the variations of the builtin already generated, …\nRequest overloads that use <code>samplerCubeArray(Shadow)</code>\nThe function is user defined\nRepresents the ternary operator in glsl (<code>:?</code>)\nThe <code>core</code> profile, default when no profile is specified.\nRequest overloads that use <code>sampler2DMSArray</code>\nRequest overloads that use the double type\nUsed for image formats\nHow the function is implemented\n<code>highp</code> precision\nUsed for <code>index</code> layout qualifiers\nUsed for <code>std140</code> and <code>std430</code> layout qualifiers\n<code>lowp</code> precision\nThe function is a builtin\n<code>mediump</code> precision\nA method call like <code>what.something(a, b, c)</code>\nA prefix/postfix operator like <code>++</code>\nA precision hint used in GLSL declarations.\nThe GLSL profile used by a shader.\nRequest the standard overloads\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether this function was already defined or is just a …\nWhether the parameter should be treated as a depth image …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether this overload is the one provided by the language …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if the argument should be passed as a lhs …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nHow the function is implemented\nWhether the variable is of a pointer type (and needs …\nWhether the value of the variable can be changed or not\nRemoves the layout qualifier with <code>name</code>, if it exists and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNormalized function parameters, modifiers are not applied\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nMemory qualifiers used in the declaration to set the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemoves the layout qualifier with <code>name</code>, if it exists and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAppends <code>errors</code> with errors for all unused qualifiers\nTracks the builtin overload variations that were already …\nWhether or not this function returns void (nothing)\nThe expression that will be evaluated if <code>condition</code> returns …\nthe arguments to the method (<code>a</code>, <code>b</code>, and <code>c</code> in the example)\nThe expression that will decide which branch to take, must …\nThe target expression\nexpression the method call applies to (<code>what</code> in the example)\nthe method name (<code>something</code> in the example)\nThe operation to be performed\nWhether this is a postfix or a prefix\nThe expression that will be evaluated if <code>condition</code> returns …\nGenerates cube arrayed images\nHelper struct for texture calls with the separate …\nGenerates cube arrayed images\nGenerates multisampled variants of images\nA compiler defined builtin function\nGenerates shadow variants of images\nGenerates standard images\nSmoothStep needs a separate variant because it might need …\nInfluences the operation <code>texture_args_generator</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAdds the necessary expressions and statements to the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHelper functions used to convert from a image dimension …\nInject builtins into the declaration\nInjects the builtins into declaration that can used either …\nInjects the builtins into declaration that need doubles\nInjects the builtins into declaration that don’t need …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nHelper function to cast a expression holding a sampled …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHelper function to generate the image components for …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe size of the splat operation if some\nThe expression is an array being indexed, needed to allow …\nThe position at which an expression is, used while lowering\nThe expression is in the left hand side of an assignment\nThe expression is in the right hand side of an assignment\nHelper struct passed when parsing expressions\nAdd function argument to current scope\nAdd variable to current scope\nHelper function for building the input/output interface of …\nThe <code>FunctionArgument</code>s for the final <code>crate::Function</code>.\nEmits all the expressions captured by the emitter to the …\nEmits all the expressions captured by the emitter to the …\nStarts the expression emitter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTracks the expression kind of <code>Expression</code>s residing in …\nA arena of high level expressions which can be lowered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates the cached type resolution for <code>expr</code> forcing a …\nTracks the expression kind of <code>Expression</code>s residing in …\nLowers a <code>HirExpr</code> which might produce a <code>Expression</code>.\nSimilar to <code>lower</code> but returns an error if the expression …\ninternal implementation of <code>lower_expect</code>\nInternal implementation of <code>lower</code>\nReturns an lhs position if the current position is lhs …\nThe parameter types given in the source code.\nGets the type for the result of the <code>expr</code> expression\nGets the type handle for the result of the <code>expr</code> expression\nReturns a <code>StmtContext</code> to be used in parsing and lowering\nResolves the types of the expressions until <code>expr</code> …\nThe index is a constant\nA boolean literal was expected.\nWhilst parsing as encountered an unexpected EOF.\nThe end of file was expected.\nError returned during shader parsing.\nInformation about the cause of an error.\nOne of the expected tokens returned in <code>InvalidToken</code>.\nA float literal was expected.\nAn identifier was expected.\nAn integer literal was expected.\nThe parser entered an illegal state and exited\nThe shader specified an unsupported or invalid profile.\nWhilst parsing an unexpected token was encountered.\nThe shader requested an unsupported or invalid version.\nA specific feature is not yet implemented.\nA collection of errors returned during shader parsing.\nAn error was returned by the preprocessor.\nA semantic error was detected in the shader.\nA specific token was expected.\nA type was expected.\nA reference to a non existent member of a type was made.\nAn unknown layout qualifier was used.\nA reference to a type that wasn’t declared was used.\nA reference to a variable that wasn’t declared was used.\nUnsupported matrix of the form f16matCxR\nUnsupported matrix of the form matCx2\nA variable with the same name already exists in the …\nHolds the information about the error itself.\nReturns a <code>SourceLocation</code> for the error message.\nHolds information about the range of the source code where …\nHelper enum containing the type of conversion need for a …\nNo conversion needed\nFloat to double conversion needed\nInt or uint to double conversion needed\nInt or uint to float conversion needed\nNo conversion was yet registered\nOther type of conversion needed\nStruct detailing a store operation that must happen after …\nHelper method returning all the non standard builtin …\nHelper function, returns the type of conversion from <code>source</code>…\nAn optional conversion to be applied\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe store target\nA pointer to read the value of the store\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStruct with information needed for defining a struct …\nThe alignment required by the type.\nReturns the type, alignment and span of a struct member …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe size of the type.\nThe handle to the type, this might be the same handle …\nHelper method for backtracking from a consumed token\nUsed to store tokens already consumed by the parser but …\nReturns None on the end of the file rather than an error …\nIndicates a global declaration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses an optional array_specifier returning whether or …\nImplementation of <code>Self::parse_array_specifier</code> for a single …\n<code>external</code> whether or not we are in a global or local context\nReturns the parsed <code>ParameterQualifier</code> or …\nHelper method used to retrieve the child type of <code>ty</code> at …\nA <code>glsl</code> memory qualifier such as <code>writeonly</code>\nA token passed from the lexing used in the parsing.\nByte offset into the source string where the first char …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nByte offset into the source string where the first char …\nInformation about a builtin used in <code>add_builtin</code>.\nThe associated builtin class.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe type of the builtin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the builtin can be written to or not.\nThe storage used for the builtin.\nFragments of Naga IR, to be assembled into <code>Statements</code> once …\nAn intermediate representation of a Naga <code>Block</code>.\nAn intermediate representation of a Naga <code>Statement</code>.\nAn index into the <code>BlockContext::bodies</code> table.\nFor matrices, vectors, and scalars, we pre-load the data.\nInformation about SPIR-V result ids, stored in …\nFor arrays of matrices, we track them but not loading yet.\nThe IR coordinate space matches all the APIs except SPIR-V,\nGet a flags value with all known bits set.\nArguments of the function currently being processed\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe label id of the block that defines this expression.\nFragments of control-flow-free Naga IR.\nA table of <code>Body</code> values, each representing a block in the …\nMap from each SPIR-V block’s label id to the index of …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nList of (expression, block)\nExpression arena of the function currently being processed\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nId of the function currently being processed\nReturn the Naga <code>Expression</code> for <code>pointer_id</code>, and its …\nReturn the Naga <code>Expression</code> to use in <code>body_idx</code> to refer to …\nTracks access to gl_PerVertex’s builtins, it is used to …\nThe <code>Expression</code> constructed for this result.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nHelper function to check if <code>child</code> is in the scope of <code>parent</code>\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe local variable used for the phi node\nLocal variables arena of the function currently being …\nConsumes the <code>BlockContext</code> producing a Ir <code>Block</code>\nSPIR-V metadata about merge/continue blocks.\nThe module we’re building.\nAdd the next SPIR-V block’s contents to <code>block_ctx</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nMetadata about the usage of function parameters as …\nThe index of the direct parent of this body\nA more complicated version of the binary op, where we …\nA version of the binary op where one or both of the …\nA more complicated version of the unary op, where we force …\nWalk the statement tree and patch it in the following …\nPhi nodes encountered when parsing the function, used to …\nRecord an atomic access to some component of a global …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nOnly allow shaders with the known set of capabilities.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nMaps for a switch from a case target to the respective …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe SPIR-V type of this result.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA record of what is accessed by <code>Atomic</code> statements we’ve …\nCreates a new empty <code>Body</code> with the specified <code>parent</code>\nThe body of the loop. Its <code>Body::parent</code> is the block …\nIf the SPIR-V loop’s back-edge branch is conditional, …\nThe loop’s continuing block. This is a grandchild: its …\nComparison sampling.\nRegular sampling.\nFlags describing sampling method.\nOptions of a sampling operation.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDepth comparison sampling with a reference value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn the texture coordinates separated from the array …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGather sampling: Operates on four samples of one channel.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nProjection sampling: the division by W is expected to …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreate a default value for an output built-in.\nEnables the <code>clip_distances</code> variable in WGSL.\nEnables the <code>blend_src</code> attribute in WGSL.\nAn enable-extension not guaranteed to be present in all …\nContains the error value\nEnables <code>f16</code>/<code>half</code> primitive support in all shader languages.\nA variant of <code>EnableExtension::Implemented</code>.\nA variant of <code>LanguageExtension::Implemented</code>.\nA language extension recognized by Naga, but not …\nContains the success value\nConfiguration for the whole parser run.\nEnables the <code>@builtin(primitive_index)</code> attribute in WGSL.\nEnables subgroup built-ins in all languages.\nA variant of <code>EnableExtension::Unimplemented</code>.\nA variant of <code>LanguageExtension::Unimplemented</code>.\nFormatting WGSL front end error messages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls whether the parser should parse doc comments.\nThis function may consume a lot of stack space. …\nExpected: assignment, increment/decrement expression\nA declaration refers to itself indirectly, through one or …\nThe <code>diagnostic</code> identifier of the <code>@diagnostic(…)</code> …\nUsed for diagnostic refinement in …\nAccess of a function\nExpected: ‘struct’, ‘let’, ‘var’, ‘type’, …\nA value passed to a builtin function has a type that is not\nA break if appeared outside of a continuing block\nExpected: constant, parenthesized expression, identifier\nA declaration refers to itself directly.\nRedefinition of an identifier (used for both module-scope …\nExpected: ‘case’, ‘default’, ‘}’\nNo overload of this function accepts this many arguments.\nExpected a type.\nAccess of <code>var</code>, <code>let</code>, <code>const</code>.\nExpected: ‘,’, ‘)’\nA value passed to a builtin function has a type that is not\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>SourceLocation</code> for the first label in the error …\nThe set of argument types that would have been accepted for\nThe types that would have been accepted instead of the …\nThe index of the first argument whose type is unacceptable.\nThe index of the first unacceptable argument.\nThe first argument that is unacceptable.\nThe first argument whose type is unacceptable.\nThe first unacceptable argument.\nThat argument’s actual type.\nThe actual type of the first unacceptable argument.\nThe function name in the call expression.\nThe function name in the call expression.\nThe function name in the call expression.\nSpan of the identifier in the new definition.\nThe name of the function being called.\nThe name of the function being called.\nThe name of the function being called.\nThe location of the name of the declaration.\nThe location of the name of some declaration in the cycle.\nThe index of the <code>inconsistent_span</code> argument.\nThe prior argument whose type made the <code>arg_span</code> argument …\nThe type of the <code>inconsistent_span</code> argument.\nMaximum number of arguments accepted by any overload of …\nThe edges of the cycle of references.\nSpan of the identifier in the previous definition.\nThe point at which it is used.\nLocal state for ordering a <code>TranslationUnit</code>’s …\nA <code>GlobalDecl</code> list in which each definition occurs before …\nAn edge from a reference to its referent in the current …\nThe referent of some identifier used in the current …\nEnsure that all declarations used by <code>id</code> have been added to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate an <code>Index</code> for the given translation unit.\nA map from module-scope definitions’ names to their …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe translation unit whose declarations we’re ordering.\nThe list of declaration handles, with declarations before …\nThe current path in our depth-first traversal. Used for …\nProduce the sorted list of declaration handles, and check …\nFor each handle, whether it is an predecessor in the …\nWhere that use occurs within the current declaration.\nIterate over <code>GlobalDecl</code>s, visiting each definition before …\nFor each handle, whether we have pushed it onto <code>out</code> yet.\nWhether a declaration accepts abstract types, or …\nThis declaration can accept initializers with abstract …\nA single vector component or swizzle.\nThis declaration concretizes its initialization expression.\nValue declared as const\nWe are lowering to a constant expression, to be included …\nState for lowering an <code>ast::Expression</code> to Naga IR.\nThe type of Naga IR expression we are lowering an …\nState for constructing a <code>ir::Module</code>.\nAn <code>ast::GlobalDecl</code> for which we have built the Naga IR …\nWe are lowering to an override expression, to be included …\nA WGSL plain type.\nA WGSL reference.\nWe are lowering to an arbitrary runtime expression, to be …\nValue declared as non-const\nState for lowering a statement within a function.\nWGSL type annotations on expressions, types, values, etc.\nApply automatic type conversions for a function call.\nApply the WGSL Load Rule to <code>expr</code>.\nReturn a wrapper around <code>value</code> suitable for formatting.\nThe <code>TranslationUnit</code>’s expressions arena.\nA reference to <code>TranslationUnit::expressions</code> for the …\nFind the consensus scalar of <code>components</code> under WGSL’s …\nInsert splats, if needed by the non-‘*’ operations.\nGenerate Naga IR for call expressions and statements, and …\nReturn an expression for the concretized value of <code>expr</code>.\nType judgments for <code>module::global_expressions</code>.\nGenerate Naga IR for a type constructor expression.\nBuild a <code>Constructor</code> for a WGSL construction expression.\nWGSL’s automatic conversions for abstract types.\nConvert all expressions in <code>exprs</code> to a common scalar type.\nConvert <code>expr</code> to the leaf scalar type <code>scalar</code>.\nWhether we are lowering a constant expression or a general …\nLower <code>expr</code> and apply the Load Rule if possible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe map from the names of module-scope declarations to the …\nThe map from the names of module-scope declarations to the …\nThe map from the names of module-scope declarations to the …\nResolve the types of all expressions up through <code>handle</code>.\nAdd a single expression to the expression table that is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if <code>handle</code> is a constant expression.\nWhich <code>Expression</code>s in <code>self.naga_expressions</code> are const …\nWhich <code>Expression</code>s in <code>self.naga_expressions</code> are const …\nA map from each <code>ast::Local</code> handle to the Naga expression we…\nA map from <code>ast::Local</code> handles to the Naga expressions we’…\nGenerate a Naga IR <code>Math</code> expression.\nThe module we’re constructing.\nThe IR <code>Module</code> we’re constructing.\nStores the names of expressions that are assigned in <code>let</code> …\nConstruct a <code>Components</code> value from a ‘member’ name, …\nDetermine the type of <code>handle</code>, and add it to the module’s …\nResolves the type of a given expression.\nReturn a Naga <code>Handle&lt;Type&gt;</code> representing the front-end type …\nResolves the inner type of a given expression.\nResolves the inner types of two given expressions.\nBuild the Naga equivalent of a named AST type.\nChoose the right overload for a function call.\nTry to convert <code>expr</code>’s leaf scalar to <code>goal_scalar</code> using …\nTry to use WGSL’s automatic conversions to convert <code>expr</code> …\nApply WGSL’s automatic conversions to a vector …\nTry to convert <code>exprs</code> to <code>goal_ty</code> using WGSL’s automatic …\nObtain (inferred) type and initializer after automatic …\nThe <code>TranslationUnit</code>’s types arena.\nA reference to <code>TranslationUnit::types</code> for the translation …\nA cooked form of <code>ast::ConstructorType</code> that uses Naga types …\nAn array whose component type and size are inferred from …\nA matrix construction whose component type is inferred …\nA vector construction whose component type is inferred …\nA known Naga type.\nReturn an equivalent <code>Constructor</code> value that includes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState for constructing an AST expression.\nConfiguration for the whole parser run.\nWhich grammar rule we are in the midst of parsing.\nExpects <code>name</code> to be consumed (not in lexer).\nParse an assignment statement (will also parse increment …\ncompound_statement\nDecide if we’re looking at a construction expression, …\nWGSL directives. The focal point of this API is …\nThe <code>TranslationUnit::expressions</code> arena to which we should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpects <code>Rule::PrimaryExpr</code> or <code>Rule::SingularExpr</code> on top; …\nParse a function call statement. Expects <code>ident</code> to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a <code>lhs_expression</code>.\nA map from identifiers in scope to the locals/arguments …\nLocal variable and function argument arena for the …\nCreates a new <code>Options</code> without doc comments parsing.\nControls whether the parser should parse doc comments.\nParse a <code>singular_expression</code>.\nParses <code>&lt;T&gt;</code>, returning T and span of T\nParse type declaration of a given name.\nThe <code>TranslationUnit::types</code> arena to which we should …\nParse a <code>unary_expression</code>.\nIdentifiers used by the current global declaration that …\nAn array whose component type and size are written out: …\nThe size of an <code>Array</code> or <code>BindingArray</code>.\nA function call or type constructor expression.\nThe length as a constant expression.\nA type constructor expression.\nA type at the head of a <code>Construct</code> expression.\nA reference to a module-scope definition or predeclared …\nA module-scope declaration.\nA placeholder for a local variable declaration.\nA matrix construction whose component type is written out: …\nAn array whose component type and size are inferred from …\nA matrix construction whose component type is inferred …\nA vector construction whose component type is inferred …\nA scalar type or conversion: <code>f32(1)</code>.\nConstructing a value of a known Naga IR type.\nA user-defined type, like a struct or a type alias.\nA vector construction whose component type is written out: …\nNames of all module-scope or predeclared objects this …\nThe leaf of all <code>diagnostic(…)</code> directives in this module.\nArena for all diagnostic filter rules parsed in this …\nDoc comments appearing first in the file. This serves as …\nThe common expressions arena for the entire translation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name referred to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNon-user-defined types, like <code>vec4&lt;f32&gt;</code> or <code>array&lt;i32, 10&gt;</code>.\nThe location at which the reference to that name occurs.\nA <code>crate::diagnostic_filter</code>.\nA parsed sentinel word indicating the type of directive to …\nAn <code>enable_extension</code>.\nA <code>language_extension</code>.\n<code>enable …;</code> extensions in WGSL.\nReturns the argument unchanged.\nConvert from a sentinel word in WGSL into its associated …\nCalls <code>U::from(self)</code>.\n<code>requires …;</code> extensions in WGSL.\nEnables the <code>clip_distances</code> variable in WGSL.\nEnables the <code>blend_src</code> attribute in WGSL.\nAn enable-extension not guaranteed to be present in all …\nTracks the status of every enable-extension known to Naga.\nEnables <code>f16</code>/<code>half</code> primitive support in all shader languages.\nA variant of <code>EnableExtension::Implemented</code>.\nEnables the <code>@builtin(primitive_index)</code> attribute in WGSL.\nEnables subgroup built-ins in all languages.\nA variant of <code>EnableExtension::Unimplemented</code>.\nAdd an enable-extension to the set requested by a module.\nQuery whether an enable-extension tracked here has been …\nWhether <code>enable f16;</code> was written earlier in the shader …\nReturns the argument unchanged.\nConvert from a sentinel word in WGSL into its associated …\nCalls <code>U::from(self)</code>.\nMaps this <code>EnableExtension</code> into the sentinel word …\nA variant of <code>LanguageExtension::Implemented</code>.\nA language extension recognized by Naga, but not …\nA variant of <code>LanguageExtension::Unimplemented</code>.\nA slice of all variants of <code>ImplementedLanguageExtension</code>.\nReturns slice of all variants of …\nConvert from a sentinel word in WGSL into its associated …\nMaps this <code>LanguageExtension</code> into the sentinel word …\nMaps this <code>ImplementedLanguageExtension</code> into the sentinel …\nCollect all doc comments until a non doc token is found.\nCollect all module doc comments until a non doc token is …\nCalls the function with a lexer and returns the result of …\nReturn the token at the start of <code>input</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not to ignore doc comments. If <code>true</code>, doc …\nThe remaining unconsumed input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not a char is a blankspace (Unicode …\nReturns whether or not a char is a comment end (Unicode …\nReturns whether or not a char is a word part (Unicode …\nReturns whether or not a char is a word start (Unicode …\nThe byte offset of the end of the most recently returned …\nReturn the next non-whitespace token from <code>self</code>.\nReturn the next non-whitespace token from <code>self</code>.\nReturn the next non-whitespace token from <code>self</code>, with a …\nParses a generic scalar type, for example <code>&lt;f32&gt;</code>.\nParses a generic scalar type, for example <code>&lt;f32&gt;</code>.\nIf the next token matches it is skipped and true is …\nThe full original source code.\nAbstract Float (IEEE-754 binary64)\nAbstract Int (-2^63 ≤ i &lt; 2^63)\nConcrete f16\nConcrete f32\nConcrete f64\nConcrete i32\nConcrete i64\nWhen using this type assume no Abstract Int/Float for now\nConcrete u32\nConcrete u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage can be used as a target for atomic ops.\nIntersecting with Axis Aligned Bounding Boxes. Matches …\nAbstract floating-point type.\nWGSL abstract integer type.\nOpaque object representing an acceleration structure of …\nArray access with a computed index.\nAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known …\nAddressing space of variables.\nAllows an additional depth/stencil test to be performed …\nHomogeneous list of elements.\nGet the length of an array. The expression must resolve to …\nSize of an array.\nCast a simple type to another kind.\nAtomic scalar.\nAtomic function.\nFunction on an atomic value.\nResult of an atomic operation.\nMemory barrier flags.\n2D vector\nApply a binary operator.\nOperation that can be applied on two values.\nDescribes how an input/output variable is to be bound.\nArray of bindings.\nA code block is a vector of statements, with maybe a …\nA block containing more statements, to be executed …\nBoolean type.\nExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.\nAll gather from the same lane at the index given by the …\nAll gather from the active lane with the smallest index\nBuilt-in inputs and outputs.\nBuilt-in shader variable.\nNumber of bytes per scalar.\nCull back facing geometry.\nCull front facing geometry.\nCull non-opaque geometry.\nCull opaque geometry.\nCalls a function.\nResult of calling another function.\nInterpolate the value at the center of the pixel.\nInterpolate the value at a point that lies within all …\nComposite expression.\nConfirm a triangle intersection to be included in the …\nEnables adjusting depth without disabling early Z.\nConstant value.\nThe array size is constant.\nConstant value.\nSkips to the <code>continuing</code> block of the innermost enclosing …\nSynchronize invocations within the work group. The <code>Barrier</code> …\nCube map\n1D image\n2D image\n3D image\nDepth comparison image.\nCompute the derivative on an axis.\nAxis on which to compute a derivative.\nHint at which precision to compute a derivative.\nDoc comments preceding items.\nThe array size can change at runtime.\nExplicitly allows early depth/stencil tests.\nUse the value provided by the first or last vertex of the …\nEmit a range of expressions, visible to all statements …\nThe main function for a pipeline stage.\nAn expression that can be evaluated to obtain a value.\nExternal texture.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nForce all intersections to be treated as non-opaque.\nForce all intersections to be treated as opaque.\nUse the value provided by the first vertex of the current …\nIndicates that no interpolation will be performed.\nFloating point type.\nRequires depth/stencil tests to be performed before …\nA function defined in the module.\nFunction locals.\nA function argument.\nReference a function parameter, by its index.\nA function result.\nThe specific behavior of a <code>SubgroupGather</code> statement.\nAdd a candidate generated intersection to be included in …\nIntersecting with generated primitives. Matches …\nVariable defined at module level.\nReference a global variable.\nShader may rewrite depth only with a value greater than …\nOpaque handles, such as samplers and images.\nConditionally executes one of two blocks, based on the …\nPossibly multidimensional array of texels.\nPerforms an atomic operation on a texel value of an image.\nSub-class of the image type.\nThe number of dimensions an image has.\nLoad a texel from an image.\nType of an image query.\nQuery information from an image.\nSample a point from a sampled or a depth image.\nStores a texel value to an image.\nInitialize the <code>RayQuery</code> object.\nThe interpolation qualifier of a binding or struct field.\nAborts the current shader execution.\nStorage can be used as a source for load ops.\nShader may rewrite depth smaller than one that would have …\nIndicates that linear, non-perspective, correct …\nLiteral.\nLoad a value indirectly.\nVariable defined at function level.\nReference a local variable.\nIndexed location.\nExecutes a block repeatedly.\nCall a math function\nBuilt-in shader function for math.\nMatrix of numbers.\nSynchronize invocations within the work group. The <code>Barrier</code> …\nShader module.\nEquivalent of the WGSL’s <code>%</code> operator or SPIR-V’s <code>OpFRem</code>\nNo intersection found. Matches …\nGet the number of array layers, a <code>u32</code>.\nGet the number of mipmap levels, a <code>u32</code>.\nGet the number of samples, a <code>u32</code>.\nPipeline-overridable constant.\nPipeline-overridable constant.\nThe array size is an override-expression.\nThe value will be interpolated in a perspective-correct …\nPointer to another type.\nReturn types predeclared for the frexp, modf, and …\nPrivate data, per invocation, mutable.\nStart or continue the query given by the statement’s …\nPush constants.\n4D vector\nAll gather from the same quad lane at the index given by …\nEach gathers from the opposite quad lane along the given …\nRay flags used when casting rays. Matching vulkan …\nLocally used handle for ray queries.\nAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>…\nReturn an intersection found by <code>query</code>.\nType of a ray query intersection. Matching vulkan …\nResult of a <code>Proceed</code> <code>RayQuery</code> statement.\nGet the Positions of the triangle hit by the <code>RayQuery</code>\nCall a relational function.\nBuilt-in shader function for testing relation between …\nPipeline binding information for global resources.\nReturns from the function (possibly with a value).\nSkip axis-aligned bounding boxes.\nDon’t execute the closest hit shader.\nSkip triangular geometry.\nBarrier affects all <code>AddressSpace::Storage</code> accesses.\nStorage can be used as a target for store ops.\nBarrier synchronizes execution across all invocations …\nInterpolate the value at each sample location. In …\nSampling modifier to control the level of detail.\nRegular sampled image.\nCan be used to sample values from images.\nThe sampling qualifiers of a binding or struct field.\nCharacteristics of a scalar type.\nNumber of integral or floating-point kind.\nPrimitive type for a scalar.\nSelect between two values based on a condition.\nStage of the programmable pipeline.\nRight shift carries the sign of signed integers only.\nEach gathers from a different lane at the index given by …\nEach gathers from their lane plus the shift given by the …\nEach gathers from their lane minus the shift given by the …\nEach gathers from their lane xored with the given by the …\nSigned integer type.\nGet the size at the specified level.\nSet of special types that can be optionally generated by …\nSplat scalar into a vector.\nInstructions which make up an executable block.\nStorage buffer data, potentially mutable.\nStorage image.\nFlags describing an image.\nImage storage format.\nStores a value at an address.\nUser-defined structure.\nMember of a user-defined structure.\nCalculate a bitmask using a boolean from each active …\nResult of a <code>SubgroupBallot</code> statement.\nCompute a collective operation across all active threads …\nGather a value from another active thread in the subgroup\nResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> …\nConditionally executes one of multiple blocks, based on …\nA case for a switch statement.\nThe value of the switch case.\nVector swizzle.\nComponent selection for a vector swizzle.\nStop traversal after the first hit.\nBarrier synchronizes texture memory accesses in a …\n3D vector\nIntersecting with triangles. Matches …\nA data type declared in the module.\nEnum with additional information, depending on the kind of …\nUnsigned integer type.\nApply an unary operator.\nOperation that can be applied on a single value.\nShader may not rewrite depth value.\nUniform buffer data.\nPointer to a scalar or vector.\nVector of numbers.\nNumber of components in a vector.\nBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.\nWorkgroup shared data, mutable.\nLoad uniformly from a uniform pointer in the workgroup …\nResult of a <code>WorkGroupUniformLoad</code> statement.\nZero value of a type.\nHelper function, to create a function prototype for a …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nApply the usual default interpolation for <code>ty</code> to <code>binding</code>.\nInformation about function argument.\nFind the common type of <code>self</code> and <code>other</code> under WGSL’s …\nReturn <code>true</code> if automatic conversions will covert <code>self</code> to …\nDetermine whether <code>self</code> automatically converts to <code>goal</code>.\nReturns the ref count, upon reaching which this expression …\nFor I/O structs, defines the binding.\nBinding number within the group.\nFor resources, defines the binding point.\nFor entry points, an argument has to have a binding unless …\nFor entry points, the result has to have a binding unless …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBody of the case.\nBlock of instructions comprising the body of the function.\nReturn the canonical form of <code>self</code>, or <code>None</code> if it’s …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArena for the constants defined in this module.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe leaf of all diagnostic filter rules tree (stored in …\nThe leaf of all diagnostic filter rules tree parsed from …\nArena for all diagnostic filter rules parsed in this …\nThe intersection of a source flags value with the …")