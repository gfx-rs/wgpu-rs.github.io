searchState.loadedDescShard("wgpu", 1, "Registers a callback that is invoked when the previous …\nSubmits a series of finished command buffers for execution.\nCopies the bytes of <code>data</code> into <code>buffer</code> starting at <code>offset</code>.\nPrepares to write data to a buffer via a mapped staging …\nCopies the bytes of <code>data</code> into into a texture.\nSubmission index to wait for.\nMax time to wait for the submission to complete.\nPre-prepared reusable bundle of GPU operations.\nDescribes a <code>RenderBundle</code>.\nReturns custom implementation of RenderBundle (if custom …\nDebug label of the render bundle encoder. This will show …\nEncodes a series of GPU operations into a reusable “…\nDescribes a <code>RenderBundleEncoder</code>.\nThis type should be !Send !Sync, because it represents an …\nReturns custom implementation of RenderBundleEncoder (if …\nThe formats of the color attachments that this render …\nInformation about the depth attachment that this render …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nFinishes recording and returns a <code>RenderBundle</code> that can be …\nDebug label of the render bundle encoder. This will show …\nIf this render bundle will rendering to multiple array …\nSample count this render bundle is capable of rendering …\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\nSet push constant data.\nAssign a vertex buffer to a slot.\nLoads the specified value for this attachment into the …\nDiscards the resulting value of the render pass for this …\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nPair of load and store operations for an attachment aspect.\nIn-progress recording of a render pass: a list of render …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nDescribes the timestamp writes of a render pass.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nThis lifetime is used to protect the <code>CommandEncoder</code> from …\nReturns custom implementation of RenderPass (if custom …\nStart a occlusion query on this render pass. It can be …\nStart a pipeline statistics query on this render pass. It …\nThe index of the query set at which a start timestamp of …\nThe color attachments of the render pass.\nWhat operations will be performed on the depth part of the …\nThe depth slice index of a 3D view. It must not be …\nThe depth and stencil attachment of the render pass, if …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nDraws using a mesh shader pipeline\nDraws using a mesh shader pipeline, based on the contents …\nEnd the occlusion query on this render pass. It can be …\nThe index of the query set at which an end timestamp of …\nEnd the pipeline statistics query on this render pass. It …\nExecute a render bundle, which is a set of pre-recorded …\nDrops the lifetime relationship to the parent command …\nInserts debug marker.\nDebug label of the render pass. This will show up in …\nHow data should be read through this attachment.\nOn submission, maps the buffer to host (CPU) memory, …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls based on the contents of …\nDispatches multiple draw calls based on the contents of …\nDefines where the occlusion query results will be stored …\nRegisters a callback that is invoked when this command …\nWhat operations will be performed on this color attachment.\nStops command recording and creates debug group.\nStart record commands and group it into debug marker group.\nThe query set to write to.\nThe view that will receive the resolved output if …\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSets the active index buffer.\nSets the active render pipeline.\nSet push constant data for subsequent draw calls.\nSets the scissor rectangle used during the rasterization …\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSets the viewport used during the rasterization stage to …\nWhat operations will be performed on the stencil part of …\nWhether data will be written to through this attachment.\nDefines which timestamp values will be written for this …\nThe view to use as an attachment.\nThe view to use as an attachment.\nIssue a timestamp command at this point in the queue. The …\nDescribes the fragment processing in a render pipeline.\nDescribes a mesh shader (graphics) pipeline.\nDescribes the mesh shader stage in a mesh shader pipeline.\nHandle to a rendering (graphics) pipeline.\nDescribes a render (graphics) pipeline.\nDescribes the task shader stage in a mesh shader pipeline.\nSpecifies an interpretation of the bytes of a vertex …\nDescribes the vertex processing in a render pipeline.\nThe stride, in bytes, between elements of this buffer …\nReturns custom implementation of RenderPipeline (if custom …\nThe list of attributes which comprise a single vertex.\nThe format of any vertex buffers used with this pipeline …\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nGet an object representing the bind group layout at a …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline. This will show up in graphics …\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe compiled mesh stage and its entry point\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nIf the pipeline will be used with a multiview render pass, …\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nHow often this vertex buffer is “stepped” forward.\nThe color state of the render targets.\nThe compiled task stage, its entry point, and the color …\nThe compiled vertex stage, its entry point, and the input …\nHandle to a sampler.\nDescribes a <code>Sampler</code>.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nMust be at least 1. If this is not 1, all filter modes …\nReturns custom implementation of Sampler (if custom …\nBorder color to use when <code>address_mode</code> is […\nIf this is enabled, this is a comparison sampler using the …\nDebug label of the sampler. This will show up in graphics …\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nHow to filter the texture when it needs to be minified …\nHow to filter between mip map levels\nCompilation information for a shader module.\nA single message from the shader compilation process.\nThe type of a compilation message.\nAn error message.\nAn informational message.\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nDescriptor for a shader module given by any of several …\nSource of a shader module.\nA human-readable representation for a span, tailored for …\nA warning message.\nWGSL module as a string slice.\nReturns custom implementation of ShaderModule (if custom …\nShader DXIL source.\nEntrypoint. Unused for Spir-V.\nGet the compilation info for the shader module.\nShader GLSL source (currently unused).\nShader HLSL source.\nDebug label of the shader module. This will show up in …\nDebug label of the shader module. This will show up in …\nLength in code units (in bytes) of the span.\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nWhere in the source code the message points at.\nThe text of the message.\nThe type of the message.\nThe messages from the shader compilation process.\nShader MSL source.\nNumber of workgroups in each dimension x, y and z. Unused …\n0-based Offset in code units (in bytes) of the start of …\nRuntime checks that should be enabled.\nSource code for the shader.\nBinary SPIR-V data, in 4-byte words.\nShader WGSL source.\n<code>Instance::create_surface()</code> or a related function failed.\nSurface from a DRM device.\nError from <code>wgpu_hal</code>.\nRaw window &amp; display handle.\nError when trying to get a [<code>DisplayHandle</code>] or a …\nHandle to a presentable surface.\nDescribes a <code>Surface</code>.\nThe window/canvas/surface/swap-chain/etc. a surface is …\nThe window/canvas/surface/swap-chain/etc. a surface is …\nError from WebGPU surface creation.\nWindow handle producer.\nSuper trait for window handles as used in <code>SurfaceTarget</code>.\nOptionally, keep the source of the handle used for the …\nSpecifies how the alpha channel of the textures should be …\nReturns custom implementation of Surface (if custom …\nGet the <code>wgpu_hal</code> surface from this <code>Surface</code>.\nInitializes <code>Surface</code> for presentation.\nDesired maximum number of frames that the presentation …\nThe texture format of the swap chain. The only formats …\nReturns the argument unchanged.\nCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.\nReturns the capabilities of the surface when used with the …\nReturns the next texture to be presented by the swapchain …\nReturn a default <code>SurfaceConfiguration</code> from width and …\nHeight of the swap chain. Must be the same size as the …\nAdditional surface data returned by […\nCalls <code>U::from(self)</code>.\nPresentation mode of the swap chain. Fifo is the only mode …\nThe usage of the swap chain. The only usage guaranteed to …\nSpecifies what view formats will be allowed when calling …\nWidth of the swap chain. Must be the same size as the …\nThe ID of the connector associated with the selected mode.\nThe file descriptor of the DRM device.\nThe display height of the selected mode.\nThe plane index on which to create the surface.\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\nThe display refresh rate of the selected mode multiplied …\nThe display width of the selected mode.\nThe swap chain has been lost and needs to be recreated.\nAcquiring a texture failed with a generic error. Check …\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the swap …\nResult of an unsuccessful call to …\nSurface texture that can be rendered to. Result of a …\nA timeout was encountered while trying to acquire the next …\nReturns custom implementation of SurfaceTexture (if custom …\nSchedule this texture to be presented on the owning …\n<code>true</code> if the acquired buffer can still be used for …\nAccessible view of the frame.\nHandle to a texture on the GPU.\nDescribes a <code>Texture</code>.\nReturns custom implementation of Texture (if custom …\nGet the <code>wgpu_hal</code> texture from this <code>Texture</code>.\nMake an <code>TexelCopyTextureInfo</code> representing the whole …\nCreates a view of this texture, specifying an …\nReturns the depth or layer count of this <code>Texture</code>.\nDestroy the associated native resources as soon as …\nReturns the dimension of this <code>Texture</code>.\nDimensions of the texture.\nReturns the format of this <code>Texture</code>.\nFormat of the texture.\nCreates a texture from already created custom …\nReturns the height of this <code>Texture</code>.\nDebug label of the texture. This will show up in graphics …\nReturns the mip_level_count of this <code>Texture</code>.\nMip count of texture. For a texture with no extra mips, …\nReturns the sample_count of this <code>Texture</code>.\nSample count of texture. If this is not 1, texture must …\nReturns the size of this <code>Texture</code>.\nSize of the texture. All components must be greater than …\nReturns the allowed usages of this <code>Texture</code>.\nAllowed usages of the texture. If used in other ways, the …\nSpecifies what view formats will be allowed when calling …\nReturns the width of this <code>Texture</code>.\nHandle to a texture view.\nDescribes a <code>TextureView</code>.\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nReturns custom implementation of TextureView (if custom …\nGet the <code>wgpu_hal</code> texture view from this <code>TextureView</code>.\nAspect of the texture. Color textures must be […\nBase array layer.\nBase mip level.\nThe dimension of the texture view. For 1D textures, this …\nFormat of the texture view. Either must be the same as the …\nDebug label of the texture view. This will show up in …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nReturns the <code>Texture</code> that this <code>TextureView</code> refers to.\nThe allowed usage(s) for the texture view. Must be a …\nDescriptor to create top level acceleration structures.\nTop Level Acceleration Structure (TLAS).\nGet the binding resource for the underling acceleration …\nReturns custom implementation of Tlas (if custom backend …\nGet the <code>wgpu_hal</code> acceleration structure from this <code>Tlas</code>.\nFlags for the bottom level acceleration structure.\nGet a reference to all instances.\nGet a single mutable reference to an instance. Returns …\nGet a mutable slice to a range of instances. Returns None …\nLabel for the top level acceleration structure.\nNumber of instances that can be stored in the acceleration …\nUpdate mode for the bottom level acceleration structure.\nProvides wrappers custom backend implementations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method will start the wgpu_core level command …\nConfigured device is needed to know which backend code to …\nSafety\nThe error sink with which to report errors. <code>None</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeliver the error to\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn integer type which can be safely shared between threads.\nReturns a mutable pointer to the underlying integer.\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nAdds to the current value, returning the previous value.\nBitwise “and” with the current value.\nMaximum with the current value.\nMinimum with the current value.\nBitwise “nand” with the current value.\nBitwise “or” with the current value.\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nBitwise “xor” with the current value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying integer.\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nImplements <code>PartialEq</code>, <code>Eq</code>, <code>PartialOrd</code>, <code>Ord</code>, and <code>Hash</code> for a …\nImplements <code>PartialEq</code>, <code>Eq</code>, <code>PartialOrd</code>, <code>Ord</code>, and <code>Hash</code> for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nLoads a value from the atomic integer.\nCreates a new atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …\nSubmit must always drain the iterator, even in the case of …\nGenerates Dispatch types for each of the interfaces. Each …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubmit must always drain the iterator, even in the case of …\nCreate a single trait with the given supertraits and a …\nDescribes a Buffer when allocating.\nUtility methods not meant to be in the main API.\nArgument buffer layout for <code>dispatch_indirect</code> commands.\nCPU accessible buffer used to download data back from the …\nArgument buffer layout for <code>draw_indexed_indirect</code> commands.\nArgument buffer layout for <code>draw_indirect</code> commands.\nThe texture is laid out densely in memory as:\nThe texture is laid out densely in memory as:\nMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.\nEfficiently performs many buffer writes by sharing and …\nTexture Blitting (Copying) Utility\nA builder for the <code>TextureBlitter</code> utility. If you want the …\nOrder in which texture data is laid out in memory.\nAdds extra conversion functions to <code>TextureFormat</code>.\nChunks into which we are accumulating data to be …\nAligns a <code>value</code> to an <code>alignment</code>.\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nThe value added to the vertex index before indexing into …\nChunks that have scheduled transfers already; they are …\nContents of a buffer on creation.\nCreates a Buffer with data to initialize it.\nUpload an entire texture and its mipmaps from a source …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nChunks that are back from the GPU and ready to be mapped …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds the <code>TextureFormat</code> corresponding to the given …\nThe number of indices to draw.\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nThe number of instances to draw.\nThe number of instances to draw.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the <code>Backends::BROWSER_WEBGPU</code> backend is …\nDebug label of a buffer. This will show up in graphics …\nVersion of <code>make_spirv</code> intended for use with …\nProvides a <code>Mutex</code> for internal use based on what features …\nCreate an new instance of wgpu, but disabling …\nA recommended key for storing <code>PipelineCache</code>s for the …\nAsynchronously read the contents of a buffer.\nFree chunks are received here to be put on <code>self.free_chunks</code>…\nWhen closed chunks are mapped again, the map callback …\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\n<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the …\nAssign a vertex buffer to a slot.\nFinds the <code>StorageFormat</code> corresponding to the given …\nUsages of a buffer. If the buffer is used in any way that …\nThe number of vertices to draw.\nThe number of work groups in X dimension.\nThe number of work groups in Y dimension.\nThe number of work groups in Z dimension.\nEfficiently performs many buffer writes by sharing and …\nChunks into which we are accumulating data to be …\nAllocate a staging belt slice with the given <code>size</code> and …\nChunks that have scheduled transfers already; they are …\nPrepare currently mapped buffers for use in a submission.\nChunks that are back from the GPU and ready to be mapped …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new staging belt.\nRecall all of the closed buffers back to be reused.\nMove all chunks that the GPU is done with (and are now …\nFree chunks are received here to be put on <code>self.free_chunks</code>…\nWhen closed chunks are mapped again, the map callback …\nAllocate a staging belt slice of <code>size</code> to be copied into …\n<code>Sync</code> wrapper that works by providing only exclusive access.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes a Buffer when allocating.\nUtility methods not meant to be in the main API.\nContents of a buffer on creation.\nCreates a Buffer with data to initialize it.\nUpload an entire texture and its mipmaps from a source …\nDebug label of a buffer. This will show up in graphics …\nUsages of a buffer. If the buffer is used in any way that …\nMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\n<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the …\nAssign a vertex buffer to a slot.\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nInitialize the adapter obeying the <code>WGPU_ADAPTER_NAME</code> …\nDetermines whether the <code>Backends::BROWSER_WEBGPU</code> backend is …\nCreate an new instance of wgpu, but disabling …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTexture Blitting (Copying) Utility\nA builder for the <code>TextureBlitter</code> utility. If you want the …\nSets the <code>BlendState</code> that is used.\nReturns a new <code>TextureBlitter</code> with given settings.\nCopies the data from the source <code>TextureView</code> to the target …\nReturns a new <code>TextureBlitterBuilder</code>\nReturns a <code>TextureBlitter</code> with default settings.\nSets the <code>Sampler</code> Filtering Mode")