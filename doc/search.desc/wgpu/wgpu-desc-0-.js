searchState.loadedDescShard("wgpu", 0, "<code>wgpu</code> is a cross-platform, safe, pure-Rust graphics API. It …\nA buffer used to store the compacted size of an …\nBuffer used for acceleration structure building.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nArray of all <code>Backend</code> values, corresponding to …\nEnable writes to all channels.\nWhether wgpu should expose adapters that run on top of …\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nEnable automatic timestamp normalization. This means that …\nBinding is backed by a top level acceleration structure\nA ray-tracing acceleration structure binding.\nFlags for an acceleration structure.\nFlags for a geometry inside a bottom level acceleration …\nUpdate mode for acceleration structure builds.\nHandle to a physical graphics and/or compute device.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nA report that can be generated for informational purposes …\nFunction always passes\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nThe texture can be both read and written in the shader via …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nFences in OpenGL are short-circuited to always return <code>true</code> …\nChooses the first supported mode out of:\nChooses the first supported mode out of:\nNo explicit minor version is requested, the driver …\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on …\nAllows the <code>TextureUsages::STORAGE_BINDING</code> usage on …\nAllows a buffer to be used as input for a bottom level …\nIf not present, the texture can’t be blended into the …\nEnable blue channel writes\nBuffer used for bottom level acceleration structure …\n<code>Backend::BrowserWebGpu</code>. Supported when targeting the web …\nSupports buffer bindings with sizes that aren’t a …\nAllows the user to create arrays of buffers in shaders:\nAllows the user to create arrays of buffers in shaders:\nBack face\nBackends supported by wgpu.\nOptions that are passed to a given backend.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nHandle to a binding group.\nDescribes a group of bindings and the resources to be …\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nHandle to a binding group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nResource to be bound by a <code>BindGroup</code> for use with a …\nType of a binding in a bind group layout.\nBottom Level Acceleration Structure (BLAS).\nError occurred when trying to asynchronously prepare a …\nBuilds the given sets of geometry into the given Blas.\nContains the sets of geometry that go into a Blas.\nDescriptor for the size defining attributes, for a bottom …\nDefinition for a triangle geometry for a Bottom Level …\nDescriptor for the size defining attributes of a triangle …\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nHandle to a GPU-accessible buffer.\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for <code>Buffer</code> offsets and sizes.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for <code>BufferSlice</code> sizes.\nA slice of a <code>Buffer</code>, to be mapped, used for vertex or …\nInformation about a copy between a buffer and a texture.\nA buffer transition for use with …\nDifferent ways that you can use a buffer.\nSimilar to <code>BufferUsages</code>, but used only for …\nA read-only view of a mapped buffer’s bytes.\nA write-only view of a mapped buffer’s bytes.\nAlways perform a full build.\nEnables clear to zero for textures.\nEnables clear to zero for textures.\nAmount of times the clipper is invoked. This is also the …\nAmount of primitives that are not culled by the clipper. …\nAllows the use of <code>@builtin(clip_distances)</code> in WGSL.\nAllows the use of <code>@builtin(clip_distances)</code> in WGSL.\nEnable red, green, and blue channel writes\nThe color target of a renderpass.\nSupports comparison samplers.\nFlag used by the wgpu-core texture tracker to say a …\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nAmount of times a compute shader is invoked. This will be …\nAllows the user to set a …\nAllows the user to set a …\nBuffer to buffer copy as well as buffer clear offsets and …\nBuffer-texture copies must have <code>bytes_per_row</code> aligned to …\nAllow a buffer to be the destination buffer for a […\nThe destination of a hardware copy. cbindgen:ignore\nAllows a texture to be the destination in a  […\nThe destination of a hardware copy. cbindgen:ignore\nAllow a buffer to be the source buffer for a […\nThe source of a hardware copy. cbindgen:ignore\nAllows a texture to be the source in a […\nThe source of a hardware copy. cbindgen:ignore\nSupports textures that are cube arrays.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nRGBA double precision color.\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nHandle to a command buffer on the GPU.\nDescribes a <code>CommandBuffer</code>.\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nCompilation information for a shader module.\nA single message from the shader compilation process.\nThe type of a compilation message.\nSpecifies how the alpha channel of the textures should be …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nDescribes the timestamp writes of a compute pass.\nHandle to a compute pipeline.\nDescribes a compute pipeline.\nConstant\nContext version see BlasBuildEntry.\nContext version of BlasGeometries.\nContext version of BlasTriangleGeometry.\nView of a texture which can be used to copy to a texture, …\n<code>wgpu-core</code>’s part of <code>InternalCounters</code>.\nCpu / Software Rendering.\nDescriptor to create bottom level acceleration structures.\n<code>Instance::create_surface()</code> or a related function failed.\nDescriptor to create top level acceleration structures.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nAllows for explicit creation of textures of format …\nSupports depth bias clamping\nBy default, polygon depth is clipped to 0-1 range …\nBy default, polygon depth is clipped to 0-1 range …\nRead-only depth stencil usage.\nRead-write depth stencil usage\nSupports copies between depth textures and buffers.\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nAllows two outputs from a shader to be used for blending. …\n<code>Backend::Dx12</code>. Supported on Windows 10 and later\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nThe device’s <code>destroy</code> method was called.\nOpen connection to a graphics and/or compute device.\nDescribes a <code>Device</code>.\nCorresponds to a <code>GPUDeviceLostReason</code>.\nSupported physical device types.\nTracing enabled.\nDiscards the resulting value of the render pass for this …\nDiscrete GPU with separate CPU/GPU memory.\nDisplay-P3 color space\nLists various ways the underlying platform does not …\nBinary flags listing features that may or may not be …\nRepresents the sets of additional limits on an adapter, …\nSurface from a DRM device.\nD.component\nD.alpha\nDirect3D-12 (Windows)\nConfiguration for the DX12 backend.\nSelects which DX12 shader compiler to use.\nDXC shader model.\nThe Dxc compiler is new, fast and maintained.\nIntegral type used for dynamic bind group offsets.\nThe combination of states that a buffer must exclusively …\nThe combination of states that a texture must exclusively …\nEnables mesh shaders and task shaders in mesh shader …\nEnables mesh shaders and task shaders in mesh shader …\nEnables multiview in mesh shader pipelines\nEnables multiview in mesh shader pipelines\nEnables creating shaders from passthrough with reflection …\nEnables creating shaders from passthrough with reflection …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\n<em><strong>THIS IS EXPERIMENTAL:</strong></em> Features enabled by this may have …\nAllows usage of additional vertex formats in …\nAllows usage of additional vertex formats in …\nAllows for the creation and usage of <code>ExternalTexture</code>s, and …\nAllows for the creation and usage of <code>ExternalTexture</code>s, and …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nAttempted to obtain adapter specified by environment …\nFunction passes if new value is equal to existing value. …\nErrors resulting from usage of GPU APIs.\nAn error message.\nKinds of <code>Error</code>s a <code>Device::push_error_scope()</code> may be …\nLower level source of the error.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nToken of the user agreeing to access experimental features.\nExtent of a texture related operation.\nHandle to an external texture on the GPU.\nBinding is backed by an external texture.\nAn external texture binding.\nDescribes an <code>ExternalTexture</code>.\nFormat of an <code>ExternalTexture</code>. This indicates the number of …\nParameters describing a gamma encoding transfer function …\nIf not present, the texture can’t be sampled with a …\nAllows textures with formats “r32float”, “rg32float…\nAllows textures with formats “r32float”, “rg32float…\nBinding is visible from the fragment shader of a render …\nAmount of times the fragment shader is ran. Accounts for …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nOne half-precision float (no Rust equiv). <code>f32</code> in shaders.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment processing in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nThe Fxc compiler (default) is old, slow and unmaintained.\n<code>Backend::Gl</code>. Supported on Linux/Android, the web through …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nEnable green channel writes\nOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, …\nConfiguration for the OpenGL/OpenGLES backend.\nDictate the behavior of fences in OpenGL.\nSelects which OpenGL ES 3 minor version to request.\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\n<code>wgpu-hal</code>’s part of <code>InternalCounters</code>.\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nIgnore the stencil state for the face.\nThe combination of states that a buffer may be in <em>at the </em>…\nThe combination of states that a texture may be in <em>at the </em>…\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nThe index buffer used for drawing.\nAllow a buffer to be the indirect buffer in an indirect …\nThe indirect or count buffer in a indirect draw or …\nSupports indirect drawing and dispatching.\nAllows non-zero value for the <code>first_instance</code> member in …\nAllows non-zero value for the <code>first_instance</code> member in …\nA timestamp that is invalid due to the platform not having …\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nAn informational message.\nThe alpha channel, if it exists, of the textures is …\nContains the various entry points to start interacting …\nVertex data is advanced every instance.\nOptions for creating an instance.\nInstance debugging flags.\nIntegrated GPU with shared CPU/GPU memory.\nCatch only internal errors.\nInternal error. Used for signalling any failures not …\nAll internal counters, exposed for debugging purposes.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nObject debugging label.\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe swap chain has been lost and needs to be recreated.\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nMinimum alignment of buffer mappings.\nAllow a buffer to be mapped for reading using […\nThe argument to a read-only mapping.\nAllow a buffer to be mapped for writing using […\nThe argument to a write-only mapping.\nThe largest number that can be returned by …\nBinding is visible from the mesh shader of a mesh pipeline.\n<code>Backend::Metal</code>. Supported on macOS and iOS.\nSupports sample-rate shading.\nAllows a texture of this format to back a view passed as …\nAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call …\nAllows the user to call …\nPresentation frames are kept in a single-frame queue. …\nApplications that have control over the content that is …\nType of buffer mapping.\nmax(Src, Dst)\nMemory budget thresholds used by backends to try to avoid …\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nDescribes a mesh shader (graphics) pipeline.\nDescribes the mesh shader stage in a mesh shader pipeline.\nMetal API (Apple platforms)\nmin(Src, Dst)\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\n<code>Backend::Noop</code>.\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nNo value.\nPower usage is not considered when choosing an adapter.\nDummy backend, which may be used for testing.\nConfiguration for the noop backend.\nFences in OpenGL behave normally. If you don’t know what …\nFunction passes if new value is not equal to existing …\nNo adapter available via the instance’s backends matched …\n<code>TextureFormat::R8Unorm</code> Y plane, and <code>TextureFormat::Rg8Unorm</code>\nThe combination of all usages that the are guaranteed to …\nThe combination of all usages that the are guaranteed to …\nBlend state of <code>(1 * src) + ((1 - src_alpha) * dst)</code>.\nQuery returns a single 64-bit number, serving as an …\nTracing disabled.\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nAcquiring a texture failed with a generic error. Check …\nCatch only out-of-memory errors.\nOut of memory.\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the swap …\nThe surface under the swap chain has changed.\nYUV 4:2:0 chroma subsampled format.\nAllows the user to create bind groups containing arrays …\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nBlend mode that does standard alpha blending with …\nReady to present image to the surface.\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nAllows the use of push constants: small, fast bits of …\nRanges of writes to push constant storage must be at least …\nFavor performance over memory usage (the default value).\nHandle to a pipeline cache, which is used to accelerate …\nDescribes a pipeline cache, which allows reusing …\nAdvanced options for use when a pipeline is compiled\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded in a …\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nThis was a poll.\nError states after a device poll\nStatus of device poll operation.\nPassed to <code>Device::poll</code> to control how and if it should …\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nIf possible, perform an incremental update.\nTiming and queueing with which frames are actually …\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nA buffer used to store query results.\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a <code>QuerySetDescriptor</code>.\nSize in bytes of a single piece of query data.\nHandle to a query set.\nDescribes a <code>QuerySet</code>.\nType of query contained in a <code>QuerySet</code>.\nHandle to a command queue on a device.\nThere are no active submissions in flight as of the …\nA write-only view into a staging buffer.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [−32767, …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 64 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [−127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nRead-only sampled or fetched resource.\nAllows for usage of textures of format …\nAllows for usage of textures of format …\nRaw window &amp; display handle.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nPre-prepared reusable bundle of GPU operations.\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nEncodes a series of GPU operations into a reusable “…\nDescribes a <code>RenderBundleEncoder</code>.\nIn-progress recording of a render pass: a list of render …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nDescribes the timestamp writes of a render pass.\nHandle to a rendering (graphics) pipeline.\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nError when <code>Instance::request_adapter()</code> fails.\nAdditional information required when requesting an adapter.\nOptions for requesting adapter.\nRequesting a device from an <code>Adapter</code> failed.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [−…\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [−…\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nSingle <code>TextureFormat::Rgba8Unorm</code> or …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to use 16-bit floating point types. You may …\nAllows shaders to use 16-bit floating point types. You may …\nAllows shaders to use <code>quantizeToF16</code>, <code>pack2x16float</code>, and …\nEnables 64-bit floating point types in SPIR-V shaders.\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use f32 atomic load, store, add, sub, …\nAllows shaders to use f32 atomic load, store, add, sub, …\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nWhen used as a STORAGE texture, then a texture with this …\nAllows a texture to be used with image atomics. Requires …\nImage atomic enabled storage. cbindgen:ignore\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nWhen used as a STORAGE texture, then a texture with this …\nA read-only storage buffer used in a bind group. …\nRead-only storage texture usage. Corresponds to a UAV in …\nWhen used as a STORAGE texture, then a texture with this …\nA read-write buffer used in a bind group. cbindgen:ignore\nRead-write storage texture usage. cbindgen:ignore\nAllows the user to create uniform arrays of storage …\nAllows the user to create uniform arrays of storage …\nAllows shaders to index storage texture resource arrays …\nAllows shaders to index storage texture resource arrays …\nWhen used as a STORAGE texture, then a texture with this …\nWrite-only storage texture usage. cbindgen:ignore\nAllows compute and fragment shaders to use the subgroup …\nAllows compute and fragment shaders to use the subgroup …\nAllows compute shaders to use the subgroup barrier.\nAllows compute shaders to use the subgroup barrier.\nAllows vertex shaders to use the subgroup operation …\nAllows vertex shaders to use the subgroup operation …\nSupports specifying which view formats are allowed when …\nHandle to a sampler.\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nDescriptor for a shader module given by any of several …\nDescribes how shader bound checks should be performed.\nSource of a shader module.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nOne signed short (u16). <code>i32</code> in shaders.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed byte (i8). <code>i32</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nOne signed short (i16). [−32767, 32767] converted to …\nTwo signed shorts (i16). [−32767, 32767] converted to …\nFour signed shorts (i16). [−32767, 32767] converted to …\nOne signed byte (i8). [−127, 127] converted to float [−…\nTwo signed bytes (i8). [−127, 127] converted to float […\nFour signed bytes (i8). [−127, 127] converted to float […\nSome value of type <code>T</code>.\nA human-readable representation for a span, tailored for …\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nThe statically-linked variant of Dxc.\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nIdentifier for a particular call to <code>Queue::submit</code>. Can be …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nHandle to a presentable surface.\nDefines the capabilities of a given surface and adapter.\nDescribes a <code>Surface</code>.\nResult of an unsuccessful call to …\nStatus of the received surface image.\nThe window/canvas/surface/swap-chain/etc. a surface is …\nThe window/canvas/surface/swap-chain/etc. a surface is …\nSurface texture that can be rendered to. Result of a …\nBinding is visible from the task shader of a mesh pipeline.\nEnables device specific texture format features.\nEnables device specific texture format features.\nEnables image atomic fetch add, and, xor, or, min, and max …\nEnables image atomic fetch add, and, xor, or, min, and max …\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows the user to create uniform arrays of textures in …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables ASTC HDR family of compressed textures.\nAllows the 3d dimension for textures with ASTC compressed …\nAllows the 3d dimension for textures with ASTC compressed …\nEnables BCn family of compressed textures. All BCn …\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nAllows for creation of textures of format …\nEnables R64Uint image atomic min and max.\nEnables R64Uint image atomic min and max.\nEnables use of Timestamp Queries. These queries tell the …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nAllows a buffer to be used as input for a top level …\nBuffer used for top level acceleration structure building.\nDescribes the task shader stage in a mesh shader pipeline.\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nHandle to a texture on the GPU.\nA texture binding.\nSelects a subset of the data a <code>Texture</code> holds.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nFormat in which a texture’s texels are stored in GPU …\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nA texture transition for use with …\nDifferent ways that you can use a texture.\nSimilar to <code>TextureUsages</code>, but used only for …\nHandle to a texture view.\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nA timeout was encountered while trying to acquire the next …\nThe requested Wait timed out before the submission was …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\nTop Level Acceleration Structure (TLAS).\nSafe instance for a Tlas.\nControls API call tracing and specifies where the trace is …\n[0, 0, 0, 0]\nTriangle geometry variant.\nTriangle geometries.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nTriangle geometry version.\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nA uniform buffer bound in a bind group.\nAllows uniform buffers to be bound as binding arrays.\nAllows uniform buffers to be bound as binding arrays.\nThe texture is in unknown state.\nFlag used by the wgpu-core texture tracker to say that the …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nOne unsigned short (u16). <code>u32</code> in shaders.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nOne unsigned byte (u8). <code>u32</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nThe callback of <code>Device::on_uncaptured_error()</code>.\nA buffer for uniform values.\nThe surface status is not known since …\nThe device was lost for an unspecific reason, including …\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nOne unsigned short (u16). [0, 65535] converted to float […\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nOne unsigned byte (u8). [0, 255] converted to float [0, 1] …\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\nFour unsigned 8-bit integers, packed into a 32-bit integer …\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\nEnable validation in the backend API, if possible:\nValidate indirect buffer content prior to issuing indirect …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nA vertex buffer used for drawing.\nVertex buffer offsets and strides have to be a multiple of …\nEnables using 64-bit types for vertex attributes.\nEnables using 64-bit types for vertex attributes.\nBinding is visible from the vertex and fragment shaders of …\nAmount of times the vertex shader is ran. Accounts for the …\nSupports storage buffers in vertex shaders.\nVertex buffer strides have to be a multiple of this number.\nEnables bindings of writable storage buffers and textures …\nEnables bindings of writable storage buffers and textures …\nSupports specifying which view format values are allowed …\n<code>Backend::Vulkan</code>. Supported on Windows, Linux/Android, and …\nAllows using the VK_KHR_external_memory_win32 Vulkan …\nAllows using the VK_KHR_external_memory_win32 Vulkan …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nCatch only validation errors.\nValidation error, signifying a bug in code or data …\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nSpecifies an interpretation of the bytes of a vertex …\nVertex Format for a <code>VertexAttribute</code> (input).\nDescribes the vertex processing in a render pipeline.\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API (Windows, Linux, Android, MacOS via …\nSupports all the texture usages described in WebGPU. If …\nOn wgpu-core based backends, block until the given …\nThe requested Wait was satisfied before the timeout.\nA warning message.\nWGSL module as a string slice.\nWGSL language extensions.\nWindow handle producer.\nSuper trait for window handles as used in <code>SurfaceTarget</code>.\nMap only for writing\nThe texture can only be written in the shader and it:\nThe requested Wait was given a wrong submission index.\nSeparate <code>TextureFormat::R8Unorm</code> Y, Cb, and Cr planes.\nZero origin.\nZero origin.\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nThis lifetime is used to protect the <code>CommandEncoder</code> from …\nThis lifetime is used to protect the <code>CommandEncoder</code> from …\nOptionally, keep the source of the handle used for the …\nThis type should be !Send !Sync, because it represents an …\nAlpha component of the color\nAmount of allocated gpu memory attributed to acceleration …\nReturns the alignment required for …\nDeferred actions recorded at encode time, to run at …\nShared with CommandEncoder to enqueue deferred actions …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns self with all flags set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nCreates a new configuration where all checks are enabled …\nMask of all features which are experimental.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nAll live allocations, sub-allocated from memory blocks.\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nVertex formats allowed for creating and building BLASes\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nTypes and functions which define our public api and their …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer …\nThe copy aspect.\nAspect of the texture. Color textures must be […\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nThe list of attributes which comprise a single vertex.\nBlue component of the color\nBack face mode.\nBackend used for device\nOptions the control the behavior of specific backends.\nWhich <code>Backends</code> to enable.\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nDepth bias state.\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGets the set flags as a container holding an array of bits.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReference to the acceleration structure.\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of texel in a texel block in the y direction.\nThe number of bytes one texel block occupies during an …\nThe size of a single texture texel block in bytes.\nThe number of texel in a texel block in the x direction.\nAll memory blocks.\nBorder color to use when <code>address_mode</code> is […\nEnforce bounds checks in shaders, even if the underlying …\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to transition.\nThe buffer to be copied to/from.\nAmount of allocated gpu memory attributed to buffers, in …\nThe format of any vertex buffers used with this pipeline …\nReturns the size in bytes of the index format\nThe total number of bytes in the copy region.\nBytes per “row” in an image.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nCreates a new configuration where the shader is fully …\nDepth bias clamp value (absolute).\nWe need to impl <code>PartialEq</code>, <code>Eq</code>, <code>PartialOrd</code>, <code>Ord</code>, and <code>Hash</code> …\nColor equation.\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nSurface that is required to be presentable with the …\nSurface that is required to be presentable with the …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nBitwise not - <code>!self</code>\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all the bits set in <code>other</code> are all set in <code>self</code>\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe height of the copy region in pixels.\nThe width of the copy region in pixels.\n<code>wgpu-core</code> counters.\nTotal count of queries the set contains. Must not be zero. …\nThe number of samples calculated per pixel (for MSAA). For …\nIf the binding is an array of multiple resources. …\nThe face culling mode.\nProvides wrappers custom backend implementations\nCustom index for the instance used inside the shader.\nThe data used to initialise the cache initialise\nEnable recommended debugging and validation flags.\nCreates a new instance of wgpu with default options.\nHelper function to construct a <code>DynamicDxc</code> variant with …\nThese default limits are guaranteed to to work on all …\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nThe depth of the copy region in pixels.\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nThe depth slice index of a 3D view. It must not be …\nInformation about the depth attachment that this render …\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nBitwise and of the complement of other - <code>self &amp; !other</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nUses of <code>Features</code> prefixed with “EXPERIMENTAL” are …\nInfrastructure for dispatching calls to the appropriate “…\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nTransfer function for the destination color space. This …\nOptions for the DX12 backend, [<code>Backend::Dx12</code>].\nShader DXIL source.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns self with no flags set.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nWhether to allow the noop backend to be used.\nUses of <code>Features</code> prefixed with “EXPERIMENTAL” may …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nEntrypoint. Unused for Spir-V.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nReturns true if variants are same (ignoring clear value)\nSpecifies whether <code>self.required_features</code> is allowed to …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nWhether to create a cache without data when the provided …\nBehavior of OpenGL fences. Affects how …\nNumber of indexes to skip in the index buffer (optional, …\nOffset into the vertex buffer as a factor of the vertex …\nFlags for the geometry.\nFlags for the bottom level acceleration structure.\nFlags for the bottom level acceleration structure.\nFlags to tune the behavior of the instance.\nCombined boolean flags.\nAdditional property flags for the format.\nThreshold at which devices will become lost due to memory …\nThreshold at which texture, buffer, query set and …\nIndicates that only a fallback adapter can be returned. …\nIndicates that only a fallback adapter can be returned. …\nIf false, the caller MUST ensure that all passed shaders …\nFormat of the external texture.\nThe texture format of the swap chain. The only formats …\nFormat of the texture.\nFormat of the texture view. Either must be the same as the …\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>BufferSlice</code> to an equivalent …\nReturns the argument unchanged.\nConvert a <code>BufferSlice</code> to an equivalent <code>BufferBinding</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nTakes in <code>FeatureBits</code> and returns None if there are invalid …\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nTakes in <code>FeatureBits</code> and returns Self with all bits that …\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nTakes in <code>FeatureBits</code> and returns Self with only valid bits …\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer decent defaults from the build type.\nGenerates a set of backends from a comma separated list of …\nChoose which DX12 shader compiler to use from the …\nChoose which minor OpenGL ES version to use from the …\nChoose which minor OpenGL ES version to use from the …\nGet a power preference from the environment variable …\nGets a set of backends from the environment variable …\nChoose instance options entirely from environment …\nDerive defaults from environment variables. See …\nChoose backend options by calling <code>from_env</code> on every field.\nChoose OpenGL backend options by calling <code>from_env</code> on every …\nChoose DX12 backend options by calling <code>from_env</code> on every …\nChoose whether the noop backend is enabled from the …\nCombines the features from the internal flags into the …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nTakes in a name and returns Self if it matches or none if …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\n3x3 column-major matrix to transform linear RGB values in …\nGeometries.\nOptions for the OpenGL/OpenGLES backend, [<code>Backend::Gl</code>].\nWhich OpenGL ES 3 minor version to request, if using …\nShader GLSL source (currently unused).\nReturns the format features guaranteed by the WebGPU spec.\n<code>wgpu-hal</code> counters.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the external texture.\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nThe height of the copy region in blocks.\nShader HLSL source.\nThe number of bytes in a densely packed list of images.\nThe number of rows in a densely packed list of images.\nThe stride in bytes between the start of one image and the …\nThe stride in rows between the start of one image and the …\nMacro to load raw SPIR-V data statically, for use with …\nLoad WGSL source code from a file at compile time.\nIndex buffer (optional).\nNumber of indices. Only needed if an index buffer is used. …\nFormat of an index. Only needed if an index buffer is used.\nAdditional surface data returned by […\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts specified flag(s) into self\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nBitwise and - <code>self &amp; other</code>\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nReturns whether any bit set in <code>self</code> matched any bit set in …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns whether the struct has all flags set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for ASTC compressed formats.\nReturns true if the fence behavior is <code>AutoFinish</code>.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns whether there is no flag set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the user has agreed to access experimental …\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns true if this timestamp is the invalid timestamp.\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the fence behavior is <code>Normal</code>.\nReturns true if the result is <code>Self::QueueEmpty</code>.\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nReturns true if the underlying platform offers complete …\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns an iterator over the set flags.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns an iterator over the set flags and their names.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLabel for the bottom level acceleration structure.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label for the device.\nDebug label of the external texture. This will show up in …\nDebug label for the query set.\nDebug label of the render bundle encoder. This will show …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of the texture view. This will show up in …\nLabel for the top level acceleration structure.\nDebug label of the bind group. This will show up in …\nDebug label of the bind group layout. This will show up in …\nDebug label of the pipeline cache. This might show up in …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the render bundle encoder. This will show …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of this command buffer.\nWhether to wait for the latency waitable object before …\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nLength in code units (in bytes) of the span.\nAdditional limits\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nHow data should be read through this attachment.\nTransform to apply to <code>ImageLoad</code> coordinates.\nWhere in the source code the message points at.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nConvenience macros\nHow to filter the texture when it needs to be magnified …\nTakes a closure and maps the label of the command buffer …\nAllows a buffer to be mapped immediately after they are …\nMask for the instance used inside the shader to filter …\nBitmask that restricts the samples of a pixel modified by …\nThe maximum number of acceleration structures allowed to …\nAmount of bind groups that can be attached to a pipeline …\nAmount of individual resources within binding arrays that …\nAmount of individual samplers within binding arrays that …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nThe maximum number of geometry descriptors a BLAS is …\nThe maximum number of primitive (ex: triangles, aabbs) a …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the <code>workgroup_size</code> X dimension for a …\nThe maximum value of the <code>workgroup_size</code> Y dimension for a …\nThe maximum value of the <code>workgroup_size</code> Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nNumber of instances that can be stored in the acceleration …\nMaximum allowed number of components (scalars) of input or …\nThe maximum number of views that can be used by a mesh …\nThe maximum number of layers that can be output from a …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nThe maximum total value of x<em>y</em>z for a given <code>draw_mesh_tasks</code> …\nThe maximum value for each dimension of a …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nThe maximum number of instances a TLAS is allowed to have. …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nNumber of gpu memory allocations.\nMemory budget thresholds used by some backends.\nHints for memory allocation strategies.\nThe compiled mesh stage and its entry point\nThe text of the message.\nThe type of the message.\nThe messages from the shader compilation process.\nReturns the size read by an acceleration structure build …\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nShader MSL source.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf this render bundle will rendering to multiple array …\nIf the pipeline will be used with a multiview render pass, …\nIf the pipeline will be used with a multiview render pass, …\nRe-export of our <code>naga</code> dependency.\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nOptions for the noop backend, [<code>Backend::Noop</code>].\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of workgroups in each dimension x, y and z. Unused …\nDefines where the occlusion query results will be stored …\nThe offset in the buffer where the copy starts.\nBase offset of the buffer, in bytes.\n0-based Offset in code units (in bytes) of the start of …\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nFor each limit in <code>other</code> that is better than the value in …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nPower preference for the adapter.\nPower preference for the adapter.\nThe premultiplication of this texture\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nPresentation system to use.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nSet of push constant ranges this pipeline uses. Each …\nThe query set to write to.\nThe query set to write to.\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves specified flag(s) from self\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nThe view that will receive the resolved output if …\nResource to attach to the binding\nThe number of bytes in the last row of the copy region.\nThe stride in bytes between the start of one row in an …\n“Rows” that make up a single “image”.\nRuntime checks that should be enabled.\nRe-export of our <code>raw-window-handle</code> dependency.\nSample count of texture. If this is not 1, texture must …\nSample count this render bundle is capable of rendering …\nSample count supported by a given texture format.\nTransform to apply to <code>ImageSample</code> coordinates.\nReturns the sample type compatible with this format and …\nAn optional selector to transition only part of the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCalls <code>Self::insert</code> if <code>set</code> is true and otherwise calls …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWhich DX12 shader compiler to use.\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nSub descriptor for the size defining attributes of a …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nSource code for the shader.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nTransfer function for the source color space. The <em>inverse</em> …\nStage push constant range is visible from. Each stage can …\nThe new state to transition to.\nThe new state to transition to.\nStencil state.\nWhat operations will be performed on the stencil part of …\nIf the stencil aspect of the depth stencil attachment is …\nHow often this vertex buffer is “stepped” forward.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>true</code> if the acquired buffer can still be used for …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBitwise xor - <code>self ^ other</code>\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe compiled task stage, its entry point, and the color …\nThe texture to be copied to/from.\nAccessible view of the frame.\nThe texture to transition.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nReturns the theoretical memory footprint of a texture with …\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nToggles specified flag(s) in self\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nSum of the memory used by all allocations, in bytes.\nSum of the memory reserved by all memory blocks including …\nWhether API tracing for debugging is enabled, and where …\nAffine transform matrix 3x4 (rows x columns, row major …\nTransform buffer containing 3x4 (rows x columns, row …\nTransform buffer offset in bytes (optional, required if …\nKind of query that this query set should contain.\nThe type of the binding\nCreates a new configuration where none of the checks are …\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBitwise or - <code>self | other</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate mode for the bottom level acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only usage guaranteed to …\nAllowed usages of the texture. If used in other ways, the …\nThe allowed usage(s) for the texture view. Must be a …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the acceleration …\nModify the current limits to use the buffer alignment …\nThe minimum guaranteed limits for acceleration structures …\nThe recommended minimum limits for mesh shaders if you …\nModify the current limits to use the resolution limits of …\nUtility structures and functions that are built on top of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nMacro to produce an array of <code>VertexAttribute</code>.\nVertex buffer.\nNumber of vertices.\nFormat of a vertex position, must be […\nVertex stride, must be greater than …\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nReturns true if the result is either <code>Self::WaitSucceeded</code> …\nShader WGSL source.\nWidth of the external texture.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nThe width of the copy region in blocks.\nTakes the given options, modifies them based on the …\nTakes the given flags, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given options, modifies them based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given compiler, modifies it based on the …\nTakes the given options, modifies them based on the …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nX position of the origin\nY position of the origin\n4x4 column-major matrix with which to convert sampled …\nZ position of the origin\nWhether workgroup scoped memory will be initialized with …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nWhether this acceleration structure can be used to create …\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nDescriptor for each triangle geometry.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to <code>dxcompiler.dll</code>.\nMaximum shader model the given dll supports.\nDescription of the validation error.\nDescription of the internal GPU error.\nLower level source of the error.\nLower level source of the error.\nLower level source of the error.\nDefines the range of allowed memory block sizes for …\nSubmission index to wait for.\nMax time to wait for the submission to complete.\nThe ID of the connector associated with the selected mode.\nThe file descriptor of the DRM device.\nThe display height of the selected mode.\nThe plane index on which to create the surface.\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\nThe display refresh rate of the selected mode multiplied …\nThe display width of the selected mode.\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nObject debugging label.\nNo value.\nA cute utility type that works just like <code>PhantomData</code>, but …\nSome value of type <code>T</code>.\nNot a root type, but common types for command buffer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandle to a physical graphics and/or compute device.\nAdditional information required when requesting an adapter.\nOptions for requesting adapter.\nReturns custom implementation of adapter (if custom …\nGet the <code>wgpu_hal</code> adapter from this <code>Adapter</code>.\nSurface that is required to be presentable with the …\nSurface that is required to be presentable with the …\nCreate a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal …\nThe features which can be used to create devices on this …\nIndicates that only a fallback adapter can be returned. …\nIndicates that only a fallback adapter can be returned. …\nCreates Adapter from custom implementation\nGet info about the adapter itself.\nGet info about the adapter itself.\nGenerates a timestamp using the clock used by the …\nReturns the features supported for a given texture format …\nReturns whether this adapter may present to the passed …\nThe best limits which can be used to create devices on …\nPower preference for the adapter.\nPower preference for the adapter.\nRequests a connection to a physical device, creating a …\nBinding is backed by a top level acceleration structure\nHandle to a binding group.\nDescribes a group of bindings and the resources to be …\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nResource to be bound by a <code>BindGroup</code> for use with a …\nBinding is backed by a buffer.\nBinding is backed by an array of buffers.\nDescribes the segment of a buffer to bind.\nBinding is backed by an external texture.\nBinding is a sampler.\nBinding is backed by an array of samplers.\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nReturns custom implementation of BindGroup (if custom …\nSlot for which binding provides resource. Corresponds to …\nThe buffer to bind.\nThe resources to bind to this bind group.\nDebug label of the bind group. This will show up in …\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nBase offset of the buffer, in bytes.\nResource to attach to the binding\nSize of the binding in bytes, or <code>None</code> for using the rest …\nHandle to a binding group layout.\nDescribes a <code>BindGroupLayout</code>.\nReturns custom implementation of BindGroupLayout (if …\nArray of entries in this BindGroupLayout\nDebug label of the bind group layout. This will show up in …\nFlags for an acceleration structure.\nFlags for a geometry inside a bottom level acceleration …\nUpdate mode for acceleration structure builds.\nBottom Level Acceleration Structure (BLAS).\nError occurred when trying to asynchronously prepare a …\nBuilds the given sets of geometry into the given Blas.\nContains the sets of geometry that go into a Blas.\nDescriptor for the size defining attributes, for a bottom …\nDefinition for a triangle geometry for a Bottom Level …\nDescriptor for the size defining attributes of a triangle …\nAlways perform a full build.\nContext version see BlasBuildEntry.\nContext version of BlasGeometries.\nContext version of BlasTriangleGeometry.\nDescriptor to create bottom level acceleration structures.\nIf possible, perform an incremental update.\nSafe instance for a Tlas.\nTriangle geometry variant.\nTriangle geometries.\nTriangle geometry version.\nReturns custom implementation of Blas (if custom backend …\nGet the <code>wgpu_hal</code> acceleration structure from this <code>Blas</code>.\nReference to the acceleration structure.\nCustom index for the instance used inside the shader.\nNumber of indexes to skip in the index buffer (optional, …\nOffset into the vertex buffer as a factor of the vertex …\nFlags for the geometry.\nFlags for the bottom level acceleration structure.\nGeometries.\nRaw handle to the acceleration structure, used inside raw …\nIndex buffer (optional).\nNumber of indices. Only needed if an index buffer is used. …\nFormat of an index. Only needed if an index buffer is used.\nLabel for the bottom level acceleration structure.\nMask for the instance used inside the shader to filter …\nConstruct TlasInstance.\nAsynchronously prepares this BLAS for compaction. The …\nChecks whether this BLAS is ready for compaction. The …\nSet the bottom level acceleration structure.\nSub descriptor for the size defining attributes of a …\nAffine transform matrix 3x4 (rows x columns, row major …\nTransform buffer containing 3x4 (rows x columns, row …\nTransform buffer offset in bytes (optional, required if …\nUpdate mode for the bottom level acceleration structure.\nVertex buffer.\nNumber of vertices.\nFormat of a vertex position, must be […\nVertex stride, must be greater than …\nDescriptor for each triangle geometry.\nHandle to a GPU-accessible buffer.\nError occurred when trying to async map a buffer.\nDescribes a <code>Buffer</code>.\nA slice of a <code>Buffer</code>, to be mapped, used for vertex or …\nA read-only view of a mapped buffer’s bytes.\nA write-only view of a mapped buffer’s bytes.\nThe mapped portion of a buffer, if any, and its …\nType of buffer mapping.\nMap only for reading\nMap only for writing\nReturns true if a range of this kind can touch the same …\nReturns custom implementation of Buffer (if custom backend …\nReturn the binding view of the entire buffer.\nReturn the binding view of the entire buffer.\nGet the <code>wgpu_hal</code> buffer from this <code>Buffer</code>.\nReturns the buffer this is a slice of.\nDestroy the associated native resources as soon as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGain read-only access to the bytes of a mapped <code>Buffer</code>.\nGain read-only access to the bytes of a mapped <code>Buffer</code>.\nGain write access to the bytes of a mapped <code>Buffer</code>.\nGain write access to the bytes of a mapped <code>Buffer</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of a buffer. This will show up in graphics …\nMap the buffer to host (CPU) memory, making it available …\nMap the buffer to host (CPU) memory, making it available …\nAllows a buffer to be mapped immediately after they are …\nThe range of the buffer that is mapped.\nCreates a new <code>MapContext</code>.\nReturns the offset in <code>Self::buffer()</code> this slice starts at.\nRecord that the <code>size</code> bytes of the buffer at <code>offset</code> are no …\nRecord that the buffer is no longer mapped.\nReturns the length of the buffer allocation in bytes.\nReturns the size of this slice.\nSize of a buffer, in bytes.\nReturns a <code>BufferSlice</code> referring to the portion of <code>self</code>’s …\nReturn another <code>BufferSlice</code> referring to the portion of <code>self</code>…\nThe ranges covered by all outstanding <code>BufferView</code>s and …\nUnmaps the buffer from host memory.\nReturns the allowed usages for this <code>Buffer</code>.\nUsages of a buffer. If the buffer is used in any way that …\nRecord that the <code>size</code> bytes of the buffer at <code>offset</code> are now …\nHandle to a command buffer on the GPU.\nDeferred actions recorded at encode time, to run at …\nReturns custom implementation of CommandBuffer (if custom …\nOn submission, maps the buffer to host (CPU) memory, …\nRegisters a callback that is invoked when this command …\nA deferred buffer mapping request captured during encoding …\nSet of actions to take when the command buffer is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nReturns custom implementation of CommandEncoder (if custom …\nGet the <code>wgpu_hal</code> command encoder from this <code>CommandEncoder</code>.\nThe copy aspect.\nThe copy aspect.\nBegins recording of a compute pass.\nBegins recording of a render pass.\nThe buffer to be copied to/from.\nThe buffer to be copied to/from.\nBuild bottom and top level acceleration structures.\nClears buffer to zero.\nClears texture to zero.\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nInserts debug marker.\nDebug label for the command encoder. This will show up in …\nThe layout of the texture data in this buffer.\nThe layout of the texture data in this buffer.\nOn submission, maps the buffer to host (CPU) memory, …\nMark acceleration structures as being built. <em><strong>Should only</strong></em> …\nThe target mip level of the texture.\nThe target mip level of the texture.\nRegisters a callback that is invoked when this command …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nStops command recording and creates debug group.\nStart record commands and group it into debug marker group.\nResolves a query set, writing the results into the …\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nTransition resources to an underlying hal resource state.\nIssue a timestamp command at this point in the queue. The …\nDescribes a pipeline cache, which allows reusing …\nAdvanced options for use when a pipeline is compiled\nSpecifies the values of pipeline-overridable constants in …\nThe data used to initialise the cache initialise\nWhether to create a cache without data when the provided …\nDebug label of the pipeline cache. This might show up in …\nWhether workgroup scoped memory will be initialized with …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nDescribes the timestamp writes of a compute pass.\nThis lifetime is used to protect the <code>CommandEncoder</code> from …\nShared with CommandEncoder to enqueue deferred actions …\nReturns custom implementation of ComputePass (if custom …\nStart a pipeline statistics query on this compute pass. It …\nThe index of the query set at which a start timestamp of …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nThe index of the query set at which an end timestamp of …\nEnd the pipeline statistics query on this compute pass. It …\nDrops the lifetime relationship to the parent command …\nInserts debug marker.\nDebug label of the compute pass. This will show up in …\nOn submission, maps the buffer to host (CPU) memory, …\nRegisters a callback that is invoked when this command …\nStops command recording and creates debug group.\nStart record commands and group it into debug marker group.\nThe query set to write to.\nSets the active bind group for a given bind group index. …\nSets the active compute pipeline.\nSet push constant data for subsequent dispatch calls.\nDefines which timestamp values will be written for this …\nIssue a timestamp command at this point in the queue. The …\nHandle to a compute pipeline.\nDescribes a compute pipeline.\nReturns custom implementation of ComputePipeline (if …\nThe pipeline cache to use when creating this pipeline.\nAdvanced options for when this pipeline is compiled\nThe name of the entry point in the compiled shader to use.\nGet an object representing the bind group layout at a …\nDebug label of the pipeline. This will show up in graphics …\nThe layout of bind groups for this pipeline.\nThe compiled shader module for this stage.\nError from <code>wgpu_core</code>.\nOpen connection to a graphics and/or compute device.\nDescribes a <code>Device</code>.\nErrors resulting from usage of GPU APIs.\nKinds of <code>Error</code>s a <code>Device::push_error_scope()</code> may be …\nLower level source of the error.\nCatch only internal errors.\nInternal error. Used for signalling any failures not …\nCatch only out-of-memory errors.\nOut of memory.\nRequesting a device from an <code>Adapter</code> failed.\nThe callback of <code>Device::on_uncaptured_error()</code>.\nCatch only validation errors.\nValidation error, signifying a bug in code or data …\nReturns custom implementation of Device (if custom backend …\nGet the <code>wgpu_hal</code> device from this <code>Device</code>.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreate a bottom level acceleration structure, used inside …\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> from a wgpu-hal Buffer.\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreates a new <code>ExternalTexture</code>.\nCreates a mesh shader based <code>RenderPipeline</code>.\nCreate a <code>PipelineCache</code> with initial data\nCreates a <code>PipelineLayout</code>.\nCreates a new <code>QuerySet</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a shader module.\nCreates a shader module which will bypass wgpu’s shader …\nCreates a shader module with flags to dictate runtime …\nDeprecated: Use <code>create_shader_module_trusted</code> instead.\nCreates a new <code>Texture</code>.\nCreates a <code>Texture</code> from a wgpu-hal Texture.\nCreate a top level acceleration structure, used for ray …\nDestroy this device.\nSpecifies whether <code>self.required_features</code> is allowed to …\nThe features which can be used on this device.\nReturns the argument unchanged.\nCreates Device from custom implementation\nGenerate an GPU memory allocation report if the underlying …\nQuery internal counters from the native backend for …\nCalls <code>U::from(self)</code>.\nDebug label for the device.\nThe limits which can be used on this device.\nHints for memory allocation strategies.\nConstructs a stub device for testing using <code>Backend::Noop</code>.\nSet a callback which will be called for all errors that …\nCheck for resource cleanups and mapping callbacks. Will …\nPop an error scope.\nPush an error scope.\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nSet a DeviceLostCallback on this device.\nStarts a capture in the attached graphics debugger.\nStops the current capture in the attached graphics …\nWhether API tracing for debugging is enabled, and where …\nDescription of the validation error.\nDescription of the internal GPU error.\nLower level source of the error.\nLower level source of the error.\nLower level source of the error.\nGet a static reference to a <code>Waker</code> which does nothing when …\nHandle to an external texture on the GPU.\nDescribes an <code>ExternalTexture</code>.\nDestroy the associated native resources as soon as …\nTransfer function for the destination color space. This …\nFormat of the external texture.\n3x3 column-major matrix to transform linear RGB values in …\nHeight of the external texture.\nDebug label of the external texture. This will show up in …\nTransform to apply to <code>ImageLoad</code> coordinates.\nTransform to apply to <code>ImageSample</code> coordinates.\nTransfer function for the source color space. The <em>inverse</em> …\nWidth of the external texture.\n4x4 column-major matrix with which to convert sampled …\nContains the various entry points to start interacting …\n…\n…\n…\n…\nWGSL language extensions.\nGet a flags value with all known bits set.\nReturns custom implementation of Instance (if custom …\nGet the <code>wgpu_hal</code> instance from this <code>Instance</code>.\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nConverts a wgpu-hal <code>hal::ExposedAdapter</code> to a wgpu <code>Adapter</code>.\nCreates a new surface targeting a given …\nCreates a new surface targeting a given …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns which backends can be picked for the current build …\nRetrieves all available <code>Adapter</code>s that match the given …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate an new instance of wgpu from a wgpu-core instance.\nCreates instance from custom context implementation\nCreate an new instance of wgpu from a wgpu-hal instance. …\nGet a flags value with the bits of a flag with the given …\nGenerates memory report.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate an new instance of wgpu using the given options and …\nPolls all devices.\nThe intersection of a source flags value with the …\nRetrieves an <code>Adapter</code> which matches the given …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the set of WGSL language extensions supported by …\nHandle to a pipeline cache, which is used to accelerate …\nReturns custom implementation of PipelineCache (if custom …\nGet the data associated with this pipeline cache. The data …\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nReturns custom implementation of PipelineLayout (if custom …\nBind groups that this pipeline uses. The first entry will …\nDebug label of the pipeline layout. This will show up in …\nSet of push constant ranges this pipeline uses. Each …\nHandle to a query set.\nDescribes a <code>QuerySet</code>.\nReturns custom implementation of QuerySet (if custom …\nTotal count of queries the set contains. Must not be zero. …\nDebug label for the query set.\nKind of query that this query set should contain.\nCheck the device for a single time without blocking.\nPassed to <code>Device::poll</code> to control how and if it should …\nHandle to a command queue on a device.\nA write-only view into a staging buffer.\nIdentifier for a particular call to <code>Queue::submit</code>. Can be …\nOn wgpu-core based backends, block until the given …\nReturns custom implementation of QueueWriteBufferView (if …\nReturns custom implementation of Queue (if custom backend …\nGet the <code>wgpu_hal</code> device from this <code>Queue</code>.\nCompact a BLAS, it must have had …\nCreates Queue from custom implementation\nGets the amount of nanoseconds each tick of a timestamp …\nRegisters a callback that is invoked when the previous …\nSubmits a series of finished command buffers for execution.\nCopies the bytes of <code>data</code> into <code>buffer</code> starting at <code>offset</code>.\nPrepares to write data to a buffer via a mapped staging …\nCopies the bytes of <code>data</code> into into a texture.")