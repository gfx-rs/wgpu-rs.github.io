(function() {
    var type_impls = Object.fromEntries([["naga",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3184\">Source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3186\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<OsStr>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPath%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3321\">Source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3323\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Path>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CloneToUninit-for-Path\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3174\">Source</a><a href=\"#impl-CloneToUninit-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.CloneToUninit.html\" title=\"trait core::clone::CloneToUninit\">CloneToUninit</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_to_uninit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3177\">Source</a><a href=\"#method.clone_to_uninit\" class=\"anchor\">ยง</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.CloneToUninit.html#tymethod.clone_to_uninit\" class=\"fn\">clone_to_uninit</a>(&amp;self, dst: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.u8.html\">u8</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>clone_to_uninit</code>)</span></div></span><div class='docblock'>Performs copy-assignment from <code>self</code> to <code>dest</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.CloneToUninit.html#tymethod.clone_to_uninit\">Read more</a></div></details></div></details>","CloneToUninit","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3192\">Source</a></span><a href=\"#impl-Debug-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3193\">Source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3246\">Source</a></span><a href=\"#impl-Hash-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3247\">Source</a><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, h: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details>","Hash","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3313\">Source</a></span><a href=\"#impl-Ord-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3315\">Source</a><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3479\">Source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3479\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a OsStr>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3480\">Source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3480\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, OsStr>>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3434\">Source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3434\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, Path>>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3478\">Source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3478\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsStr>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsString%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3481\">Source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3481\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsString>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3432\">Source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3432\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathBuf>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3238\">Source</a></span><a href=\"#impl-PartialEq-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3240\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3479\">Source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3479\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<&'a OsStr>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3480\">Source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3480\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'a, OsStr>>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3434\">Source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3434\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Cow<'a, Path>>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3478\">Source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3478\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<OsStr>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3COsString%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3481\">Source</a></span><a href=\"#impl-PartialOrd%3COsString%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3481\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<OsString>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3432\">Source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3432\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<PathBuf>","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3305\">Source</a></span><a href=\"#impl-PartialOrd-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3307\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Path\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2157\">Source</a><a href=\"#impl-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2191\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.new\" class=\"fn\">new</a>&lt;S&gt;(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;S</a>) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Directly wraps a string slice as a <code>Path</code> slice.</p>\n<p>This is a cost-free conversion.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\nPath::new(<span class=\"string\">\"foo.txt\"</span>);</code></pre></div>\n<p>You can create <code>Path</code>s from <code>String</code>s, or even other <code>Path</code>s:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>string = String::from(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"kw\">let </span>from_string = Path::new(<span class=\"kw-2\">&amp;</span>string);\n<span class=\"kw\">let </span>from_path = Path::new(<span class=\"kw-2\">&amp;</span>from_string);\n<span class=\"macro\">assert_eq!</span>(from_string, from_path);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_os_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2214\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.as_os_str\" class=\"fn\">as_os_str</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Yields the underlying <a href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a> slice.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>os_str = Path::new(<span class=\"string\">\"foo.txt\"</span>).as_os_str();\n<span class=\"macro\">assert_eq!</span>(os_str, std::ffi::OsStr::new(<span class=\"string\">\"foo.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_os_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2235\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.as_mut_os_str\" class=\"fn\">as_mut_os_str</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Yields a mutable reference to the underlying <a href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a> slice.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = PathBuf::from(<span class=\"string\">\"Foo.TXT\"</span>);\n\n<span class=\"macro\">assert_ne!</span>(path, Path::new(<span class=\"string\">\"foo.txt\"</span>));\n\npath.as_mut_os_str().make_ascii_lowercase();\n<span class=\"macro\">assert_eq!</span>(path, Path::new(<span class=\"string\">\"foo.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2259\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <a href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> slice if the <code>Path</code> is valid unicode.</p>\n<p>This conversion may entail doing a check for UTF-8 validity.\nNote that validation is performed because non-UTF-8 strings are\nperfectly valid for some OS.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.to_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2287\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Path</code> to a <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\"><code>Cow&lt;str&gt;</code></a>.</p>\n<p>Any non-UTF-8 sequences are replaced with\n<a href=\"https://doc.rust-lang.org/1.88.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">ยง</a>Examples</h5>\n<p>Calling <code>to_string_lossy</code> on a <code>Path</code> with valid unicode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.txt\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.to_string_lossy(), <span class=\"string\">\"foo.txt\"</span>);</code></pre></div>\n<p>Had <code>path</code> contained invalid unicode, the <code>to_string_lossy</code> call might\nhave returned <code>\"fo๏ฟฝ.txt\"</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_path_buf\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2306\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.to_path_buf\" class=\"fn\">to_path_buf</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Path</code> to an owned <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path_buf = Path::new(<span class=\"string\">\"foo.txt\"</span>).to_path_buf();\n<span class=\"macro\">assert_eq!</span>(path_buf, PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_absolute\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2331\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.is_absolute\" class=\"fn\">is_absolute</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is independent of\nthe current directory.</p>\n<ul>\n<li>\n<p>On Unix, a path is absolute if it starts with the root, so\n<code>is_absolute</code> and <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.has_root\" title=\"method std::path::Path::has_root\"><code>has_root</code></a> are equivalent.</p>\n</li>\n<li>\n<p>On Windows, a path is absolute if it has a prefix and starts with the\nroot: <code>c:\\windows</code> is absolute, while <code>c:temp</code> and <code>\\temp</code> are not.</p>\n</li>\n</ul>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"foo.txt\"</span>).is_absolute());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_relative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2351\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.is_relative\" class=\"fn\">is_relative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.is_absolute\" title=\"method std::path::Path::is_absolute\"><code>is_absolute</code></a>โs documentation for more details.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"foo.txt\"</span>).is_relative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_root\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2378\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.has_root\" class=\"fn\">has_root</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>Path</code> has a root.</p>\n<ul>\n<li>\n<p>On Unix, a path has a root if it begins with <code>/</code>.</p>\n</li>\n<li>\n<p>On Windows, a path has a root if it:</p>\n<ul>\n<li>has no prefix and begins with a separator, e.g., <code>\\windows</code></li>\n<li>has a prefix followed by a separator, e.g., <code>c:\\windows</code> but not <code>c:windows</code></li>\n<li>has any non-disk prefix, e.g., <code>\\\\server\\share</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"/etc/passwd\"</span>).has_root());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parent\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.parent\" class=\"fn\">parent</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> without its final component, if there is one.</p>\n<p>This means it returns <code>Some(\"\")</code> for relative paths with one component.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the path terminates in a root or prefix, or if itโs\nthe empty string.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/foo/bar\"</span>);\n<span class=\"kw\">let </span>parent = path.parent().unwrap();\n<span class=\"macro\">assert_eq!</span>(parent, Path::new(<span class=\"string\">\"/foo\"</span>));\n\n<span class=\"kw\">let </span>grand_parent = parent.parent().unwrap();\n<span class=\"macro\">assert_eq!</span>(grand_parent, Path::new(<span class=\"string\">\"/\"</span>));\n<span class=\"macro\">assert_eq!</span>(grand_parent.parent(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>relative_path = Path::new(<span class=\"string\">\"foo/bar\"</span>);\n<span class=\"kw\">let </span>parent = relative_path.parent();\n<span class=\"macro\">assert_eq!</span>(parent, <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"foo\"</span>)));\n<span class=\"kw\">let </span>grand_parent = parent.and_then(Path::parent);\n<span class=\"macro\">assert_eq!</span>(grand_parent, <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"kw\">let </span>great_grand_parent = grand_parent.and_then(Path::parent);\n<span class=\"macro\">assert_eq!</span>(great_grand_parent, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ancestors\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2453\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.ancestors\" class=\"fn\">ancestors</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Ancestors.html\" title=\"struct std::path::Ancestors\">Ancestors</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Produces an iterator over <code>Path</code> and its ancestors.</p>\n<p>The iterator will yield the <code>Path</code> that is returned if the <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>parent</code></a> method is used zero\nor more times. If the <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.parent\" title=\"method std::path::Path::parent\"><code>parent</code></a> method returns <a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, the iterator will do likewise.\nThe iterator will always yield at least one value, namely <code>Some(&amp;self)</code>. Next it will yield\n<code>&amp;self.parent()</code>, <code>&amp;self.parent().and_then(Path::parent)</code> and so on.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancestors = Path::new(<span class=\"string\">\"/foo/bar\"</span>).ancestors();\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/foo/bar\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ancestors = Path::new(<span class=\"string\">\"../foo/bar\"</span>).ancestors();\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"../foo/bar\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"../foo\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"..\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(ancestors.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.file_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2480\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.file_name\" class=\"fn\">file_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the final component of the <code>Path</code>, if there is one.</p>\n<p>If the path is a normal file, this is the file name. If itโs the path of a directory, this\nis the directory name.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the path terminates in <code>..</code>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"bin\"</span>)), Path::new(<span class=\"string\">\"/usr/bin/\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"tmp/foo.txt\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"foo.txt/.\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)), Path::new(<span class=\"string\">\"foo.txt/.//\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, Path::new(<span class=\"string\">\"foo.txt/..\"</span>).file_name());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, Path::new(<span class=\"string\">\"/\"</span>).file_name());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2517-2519\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;P&gt;(&amp;self, base: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.StripPrefixError.html\" title=\"struct std::path::StripPrefixError\">StripPrefixError</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">ยง</a>Errors</h5>\n<p>If <code>base</code> is not a prefix of <code>self</code> (i.e., <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.starts_with\" title=\"method std::path::Path::starts_with\"><code>starts_with</code></a>\nreturns <code>false</code>), returns <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/test/haha/foo.txt\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"test/haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/haha/foo.txt\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"\"</span>)));\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(<span class=\"string\">\"/test/haha/foo.txt/\"</span>), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"\"</span>)));\n\n<span class=\"macro\">assert!</span>(path.strip_prefix(<span class=\"string\">\"test\"</span>).is_err());\n<span class=\"macro\">assert!</span>(path.strip_prefix(<span class=\"string\">\"/te\"</span>).is_err());\n<span class=\"macro\">assert!</span>(path.strip_prefix(<span class=\"string\">\"/haha\"</span>).is_err());\n\n<span class=\"kw\">let </span>prefix = PathBuf::from(<span class=\"string\">\"/test/\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.strip_prefix(prefix), <span class=\"prelude-val\">Ok</span>(Path::new(<span class=\"string\">\"haha/foo.txt\"</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2554\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.starts_with\" class=\"fn\">starts_with</a>&lt;P&gt;(&amp;self, base: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Determines whether <code>base</code> is a prefix of <code>self</code>.</p>\n<p>Only considers whole path components to match.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/etc/passwd\"</span>);\n\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd\"</span>));\n<span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd/\"</span>)); <span class=\"comment\">// extra slash is okay\n</span><span class=\"macro\">assert!</span>(path.starts_with(<span class=\"string\">\"/etc/passwd///\"</span>)); <span class=\"comment\">// multiple extra slashes are okay\n\n</span><span class=\"macro\">assert!</span>(!path.starts_with(<span class=\"string\">\"/e\"</span>));\n<span class=\"macro\">assert!</span>(!path.starts_with(<span class=\"string\">\"/etc/passwd.txt\"</span>));\n\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"/etc/foo.rs\"</span>).starts_with(<span class=\"string\">\"/etc/foo\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2582\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.ends_with\" class=\"fn\">ends_with</a>&lt;P&gt;(&amp;self, child: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Determines whether <code>child</code> is a suffix of <code>self</code>.</p>\n<p>Only considers whole path components to match.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/etc/resolv.conf\"</span>);\n\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"etc/resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(path.ends_with(<span class=\"string\">\"/etc/resolv.conf\"</span>));\n\n<span class=\"macro\">assert!</span>(!path.ends_with(<span class=\"string\">\"/resolv.conf\"</span>));\n<span class=\"macro\">assert!</span>(!path.ends_with(<span class=\"string\">\"conf\"</span>)); <span class=\"comment\">// use .extension() instead</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.file_stem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2618\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.file_stem\" class=\"fn\">file_stem</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts the stem (non-extension) portion of <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>.</p>\n<p>The stem is:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li>The entire file name if there is no embedded <code>.</code>;</li>\n<li>The entire file name if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>Otherwise, the portion of the file name before the final <code>.</code></li>\n</ul>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).file_stem().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo.tar\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).file_stem().unwrap());</code></pre></div>\n<h5 id=\"see-also\"><a class=\"doc-anchor\" href=\"#see-also\">ยง</a>See Also</h5>\n<p>This method is similar to <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.file_prefix\" title=\"method std::path::Path::file_prefix\"><code>Path::file_prefix</code></a>, which extracts the portion of the file name\nbefore the <em>first</em> <code>.</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.file_prefix\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2652\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.file_prefix\" class=\"fn\">file_prefix</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>path_file_prefix</code>)</span></div></span></summary><div class=\"docblock\"><p>Extracts the prefix of <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>.</p>\n<p>The prefix is:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li>The entire file name if there is no embedded <code>.</code>;</li>\n<li>The portion of the file name before the first non-beginning <code>.</code>;</li>\n<li>The entire file name if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>The portion of the file name before the second <code>.</code> if the file name begins with <code>.</code></li>\n</ul>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).file_prefix().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).file_prefix().unwrap());</code></pre></div>\n<h5 id=\"see-also-1\"><a class=\"doc-anchor\" href=\"#see-also-1\">ยง</a>See Also</h5>\n<p>This method is similar to <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.file_stem\" title=\"method std::path::Path::file_stem\"><code>Path::file_stem</code></a>, which extracts the portion of the file name\nbefore the <em>last</em> <code>.</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extension\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2677\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.extension\" class=\"fn\">extension</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts the extension (without the leading dot) of <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.file_name\" title=\"method std::path::Path::file_name\"><code>self.file_name</code></a>, if possible.</p>\n<p>The extension is:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, if there is no file name;</li>\n<li><a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, if there is no embedded <code>.</code>;</li>\n<li><a href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, if the file name begins with <code>.</code> and has no other <code>.</code>s within;</li>\n<li>Otherwise, the portion of the file name after the final <code>.</code></li>\n</ul>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"rs\"</span>, Path::new(<span class=\"string\">\"foo.rs\"</span>).extension().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"gz\"</span>, Path::new(<span class=\"string\">\"foo.tar.gz\"</span>).extension().unwrap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2697\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.join\" class=\"fn\">join</a>&lt;P&gt;(&amp;self, path: P) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> with <code>path</code> adjoined to <code>self</code>.</p>\n<p>If <code>path</code> is absolute, it replaces the current path.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html#method.push\" title=\"method std::path::PathBuf::push\"><code>PathBuf::push</code></a> for more details on what it means to adjoin a path.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/etc\"</span>).join(<span class=\"string\">\"passwd\"</span>), PathBuf::from(<span class=\"string\">\"/etc/passwd\"</span>));\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"/etc\"</span>).join(<span class=\"string\">\"/bin/sh\"</span>), PathBuf::from(<span class=\"string\">\"/bin/sh\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_file_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2725\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.with_file_name\" class=\"fn\">with_file_name</a>&lt;S&gt;(&amp;self, file_name: S) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> like <code>self</code> but with the given file name.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html#method.set_file_name\" title=\"method std::path::PathBuf::set_file_name\"><code>PathBuf::set_file_name</code></a> for more details.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp/foo.png\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"bar\"</span>), PathBuf::from(<span class=\"string\">\"/tmp/bar\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"bar.txt\"</span>), PathBuf::from(<span class=\"string\">\"/tmp/bar.txt\"</span>));\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_file_name(<span class=\"string\">\"var\"</span>), PathBuf::from(<span class=\"string\">\"/var\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_extension\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2753\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.with_extension\" class=\"fn\">with_extension</a>&lt;S&gt;(&amp;self, extension: S) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an owned <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> like <code>self</code> but with the given extension.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html#method.set_extension\" title=\"method std::path::PathBuf::set_extension\"><code>PathBuf::set_extension</code></a> for more details.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.rs\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.tar.gz\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"xz\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar.xz\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_extension(<span class=\"string\">\"\"</span>).with_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_added_extension\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2802\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.with_added_extension\" class=\"fn\">with_added_extension</a>&lt;S&gt;(&amp;self, extension: S) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>path_add_extension</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates an owned <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> like <code>self</code> but with the extension added.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html#method.add_extension\" title=\"method std::path::PathBuf::add_extension\"><code>PathBuf::add_extension</code></a> for more details.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(path_add_extension)]\n\n</span><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.rs\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_added_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.rs.txt\"</span>));\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"foo.tar.gz\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.with_added_extension(<span class=\"string\">\"\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar.gz\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_added_extension(<span class=\"string\">\"xz\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar.gz.xz\"</span>));\n<span class=\"macro\">assert_eq!</span>(path.with_added_extension(<span class=\"string\">\"\"</span>).with_added_extension(<span class=\"string\">\"txt\"</span>), PathBuf::from(<span class=\"string\">\"foo.tar.gz.txt\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.components\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2842\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.components\" class=\"fn\">components</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Produces an iterator over the <a href=\"https://doc.rust-lang.org/1.88.0/std/path/enum.Component.html\" title=\"enum std::path::Component\"><code>Component</code></a>s of the path.</p>\n<p>When parsing the path, there is a small amount of normalization:</p>\n<ul>\n<li>\n<p>Repeated separators are ignored, so <code>a/b</code> and <code>a//b</code> both have\n<code>a</code> and <code>b</code> as components.</p>\n</li>\n<li>\n<p>Occurrences of <code>.</code> are normalized away, except if they are at the\nbeginning of the path. For example, <code>a/./b</code>, <code>a/b/</code>, <code>a/b/.</code> and\n<code>a/b</code> all have <code>a</code> and <code>b</code> as components, but <code>./a/b</code> starts with\nan additional <a href=\"https://doc.rust-lang.org/1.88.0/std/path/enum.Component.html#variant.CurDir\" title=\"variant std::path::Component::CurDir\"><code>CurDir</code></a> component.</p>\n</li>\n<li>\n<p>A trailing slash is normalized away, <code>/a/b</code> and <code>/a/b/</code> are equivalent.</p>\n</li>\n</ul>\n<p>Note that no other normalization takes place; in particular, <code>a/c</code>\nand <code>a/b/../c</code> are distinct, to account for the possibility that <code>b</code>\nis a symbolic link (so its parent isnโt <code>a</code>).</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, Component};\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>components = Path::new(<span class=\"string\">\"/tmp/foo.txt\"</span>).components();\n\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::RootDir));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::Normal(OsStr::new(<span class=\"string\">\"tmp\"</span>))));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">Some</span>(Component::Normal(OsStr::new(<span class=\"string\">\"foo.txt\"</span>))));\n<span class=\"macro\">assert_eq!</span>(components.next(), <span class=\"prelude-val\">None</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2875\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Produces an iterator over the pathโs components viewed as <a href=\"https://doc.rust-lang.org/1.88.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\"><code>OsStr</code></a>\nslices.</p>\n<p>For more information about the particulars of how the path is separated\ninto components, see <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.components\" title=\"method std::path::Path::components\"><code>components</code></a>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{<span class=\"self\">self</span>, Path};\n<span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = Path::new(<span class=\"string\">\"/tmp/foo.txt\"</span>).iter();\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"kw-2\">&amp;</span>path::MAIN_SEPARATOR.to_string())));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"tmp\"</span>)));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"foo.txt\"</span>)));\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">None</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2900\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.display\" class=\"fn\">display</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Display.html\" title=\"struct std::path::Display\">Display</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an object that implements <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>Display</code></a> for safely printing paths\nthat may contain non-Unicode data. This may perform lossy conversion,\ndepending on the platform.  If you would like an implementation which\nescapes the path please use <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\"><code>Debug</code></a> instead.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/tmp/foo.rs\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, path.display());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2922\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.metadata\" class=\"fn\">metadata</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries the file system to get information about a file, directory, etc.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>This is an alias to <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a>.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/Minas/tirith\"</span>);\n<span class=\"kw\">let </span>metadata = path.metadata().expect(<span class=\"string\">\"metadata call failed\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, metadata.file_type());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symlink_metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2941\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.symlink_metadata\" class=\"fn\">symlink_metadata</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries the metadata about a file without following symlinks.</p>\n<p>This is an alias to <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>fs::symlink_metadata</code></a>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/Minas/tirith\"</span>);\n<span class=\"kw\">let </span>metadata = path.symlink_metadata().expect(<span class=\"string\">\"symlink_metadata call failed\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, metadata.file_type());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2960\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.canonicalize\" class=\"fn\">canonicalize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the canonical, absolute form of the path with all intermediate\ncomponents normalized and symbolic links resolved.</p>\n<p>This is an alias to <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.canonicalize.html\" title=\"fn std::fs::canonicalize\"><code>fs::canonicalize</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::{Path, PathBuf};\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/foo/test/../test/bar.rs\"</span>);\n<span class=\"macro\">assert_eq!</span>(path.canonicalize().unwrap(), PathBuf::from(<span class=\"string\">\"/foo/test/bar.rs\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_link\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2978\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.read_link\" class=\"fn\">read_link</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads a symbolic link, returning the file that the link points to.</p>\n<p>This is an alias to <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.read_link.html\" title=\"fn std::fs::read_link\"><code>fs::read_link</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/laputa/sky_castle.rs\"</span>);\n<span class=\"kw\">let </span>path_link = path.read_link().expect(<span class=\"string\">\"read_link call failed\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3003\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.read_dir\" class=\"fn\">read_dir</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.ReadDir.html\" title=\"struct std::fs::ReadDir\">ReadDir</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the entries within a directory.</p>\n<p>The iterator will yield instances of <code><a href=\"https://doc.rust-lang.org/1.88.0/std/io/error/type.Result.html\" title=\"type std::io::error::Result\">io::Result</a>&lt;<a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.DirEntry.html\" title=\"struct std::fs::DirEntry\">fs::DirEntry</a>&gt;</code>. New\nerrors may be encountered after an iterator is initially constructed.</p>\n<p>This is an alias to <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.read_dir.html\" title=\"fn std::fs::read_dir\"><code>fs::read_dir</code></a>.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>path = Path::new(<span class=\"string\">\"/laputa\"</span>);\n<span class=\"kw\">for </span>entry <span class=\"kw\">in </span>path.read_dir().expect(<span class=\"string\">\"read_dir call failed\"</span>) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(entry) = entry {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, entry.path());\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exists\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3034\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.exists\" class=\"fn\">exists</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path points at an existing entity.</p>\n<p>Warning: this method may be error-prone, consider using <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.try_exists\" title=\"method std::path::Path::try_exists\"><code>try_exists()</code></a> instead!\nIt also has a risk of introducing time-of-check to time-of-use (TOCTOU) bugs.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"does_not_exist.txt\"</span>).exists());</code></pre></div>\n<h5 id=\"see-also-2\"><a class=\"doc-anchor\" href=\"#see-also-2\">ยง</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.try_exists\" title=\"method std::path::Path::try_exists\"><code>Path::try_exists</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_exists\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3066\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.try_exists\" class=\"fn\">try_exists</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Ok(true)</code> if the path points at an existing entity.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file. In case of broken symbolic links this will return <code>Ok(false)</code>.</p>\n<p><a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#method.exists\" title=\"method std::path::Path::exists\"><code>Path::exists()</code></a> only checks whether or not a path was both found and readable. By\ncontrast, <code>try_exists</code> will return <code>Ok(true)</code> or <code>Ok(false)</code>, respectively, if the path\nwas <em>verified</em> to exist or not exist. If its existence can neither be confirmed nor\ndenied, it will propagate an <code>Err(_)</code> instead. This can be the case if e.g. listing\npermission is denied on one of the parent directories.</p>\n<p>Note that while this avoids some pitfalls of the <code>exists()</code> method, it still can not\nprevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\nwhere those bugs are not an issue.</p>\n<p>This is an alias for <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.exists.html\" title=\"fn std::fs::exists\"><code>std::fs::exists</code></a>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert!</span>(!Path::new(<span class=\"string\">\"does_not_exist.txt\"</span>).try_exists().expect(<span class=\"string\">\"Can't check existence of file does_not_exist.txt\"</span>));\n<span class=\"macro\">assert!</span>(Path::new(<span class=\"string\">\"/root/secret_file.txt\"</span>).try_exists().is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_file\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3099\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.is_file\" class=\"fn\">is_file</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a regular file.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"./is_a_directory/\"</span>).is_file(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"a_file.txt\"</span>).is_file(), <span class=\"bool-val\">true</span>);</code></pre></div>\n<h5 id=\"see-also-3\"><a class=\"doc-anchor\" href=\"#see-also-3\">ยง</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> and handle its <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result</code></a>. Then call\n<a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.Metadata.html#method.is_file\" title=\"method std::fs::Metadata::is_file\"><code>fs::Metadata::is_file</code></a> if it was <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok</code></a>.</p>\n<p>When the goal is simply to read from (or write to) the source, the most\nreliable way to test the source can be read (or written to) is to open\nit. Only using <code>is_file</code> can break workflows like <code>diff &lt;( prog_a )</code> on\na Unix-like system for example. See <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>fs::File::open</code></a> or\n<a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>fs::OpenOptions::open</code></a> for more information.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3126\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.is_dir\" class=\"fn\">is_dir</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a directory.</p>\n<p>This function will traverse symbolic links to query information about the\ndestination file.</p>\n<p>If you cannot access the metadata of the file, e.g. because of a\npermission error or broken symbolic links, this will return <code>false</code>.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"./is_a_directory/\"</span>).is_dir(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Path::new(<span class=\"string\">\"a_file.txt\"</span>).is_dir(), <span class=\"bool-val\">false</span>);</code></pre></div>\n<h5 id=\"see-also-4\"><a class=\"doc-anchor\" href=\"#see-also-4\">ยง</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.metadata.html\" title=\"fn std::fs::metadata\"><code>fs::metadata</code></a> and handle its <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result</code></a>. Then call\n<a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.Metadata.html#method.is_dir\" title=\"method std::fs::Metadata::is_dir\"><code>fs::Metadata::is_dir</code></a> if it was <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_symlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3158\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.is_symlink\" class=\"fn\">is_symlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the path exists on disk and is pointing at a symbolic link.</p>\n<p>This function will not traverse symbolic links.\nIn case of a broken symbolic link this will also return true.</p>\n<p>If you cannot access the directory containing the file, e.g., because of a\npermission error, this will return false.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::os::unix::fs::symlink;\n\n<span class=\"kw\">let </span>link_path = Path::new(<span class=\"string\">\"link\"</span>);\nsymlink(<span class=\"string\">\"/origin_does_not_exist/\"</span>, link_path).unwrap();\n<span class=\"macro\">assert_eq!</span>(link_path.is_symlink(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(link_path.exists(), <span class=\"bool-val\">false</span>);</code></pre></div>\n<h5 id=\"see-also-5\"><a class=\"doc-anchor\" href=\"#see-also-5\">ยง</a>See Also</h5>\n<p>This is a convenience function that coerces errors to false. If you want to\ncheck errors, call <a href=\"https://doc.rust-lang.org/1.88.0/std/fs/fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>fs::symlink_metadata</code></a> and handle its <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result</code></a>. Then call\n<a href=\"https://doc.rust-lang.org/1.88.0/std/fs/struct.Metadata.html#method.is_symlink\" title=\"method std::fs::Metadata::is_symlink\"><code>fs::Metadata::is_symlink</code></a> if it was <a href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_path_buf\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3166\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html#tymethod.into_path_buf\" class=\"fn\">into_path_buf</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.88.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;Path&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> without copying or\nallocating.</p>\n</div></details></div></details>",0,"naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Path\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/ser/impls.rs.html#908\">Source</a><a href=\"#impl-Serialize-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/ser/impls.rs.html#909-911\">Source</a><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","naga::path_like::path_like_impls::PathInner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToOwned-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2051\">Source</a></span><a href=\"#impl-ToOwned-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2052\">Source</a><a href=\"#associatedtype.Owned\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2054\">Source</a><a href=\"#method.to_owned\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class='docblock'>Creates owned data from borrowed data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#2058\">Source</a><a href=\"#method.clone_into\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>)</h4></section></summary><div class='docblock'>Uses borrowed data to replace owned data, usually by cloning. <a href=\"https://doc.rust-lang.org/1.88.0/alloc/borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details>","ToOwned","naga::path_like::path_like_impls::PathInner"],["<section id=\"impl-Eq-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/std/path.rs.html#3302\">Source</a></span><a href=\"#impl-Eq-for-Path\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section>","Eq","naga::path_like::path_like_impls::PathInner"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[160308]}