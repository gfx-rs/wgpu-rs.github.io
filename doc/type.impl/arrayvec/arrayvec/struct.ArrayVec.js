(function() {
    var type_impls = Object.fromEntries([["wgpu_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#64\">Source</a><a href=\"#impl-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#83\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new empty <code>ArrayVec</code>.</p>\n<p>The maximum capacity is given by the generic parameter <code>CAP</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::new();\narray.push(<span class=\"number\">1</span>);\narray.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_const\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#99\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.new_const\" class=\"fn\">new_const</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new empty <code>ArrayVec</code> (const fn).</p>\n<p>The maximum capacity is given by the generic parameter <code>CAP</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">static </span>ARRAY: ArrayVec&lt;u8, <span class=\"number\">1024</span>&gt; = ArrayVec::new_const();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#114\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of elements in the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#126\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the <code>ArrayVec</code> is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.is_empty(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#137\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the capacity of the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#149\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return true if the <code>ArrayVec</code> is completely filled to its capacity, false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">1</span>&gt;::new();\n<span class=\"macro\">assert!</span>(!array.is_full());\narray.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(array.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#160\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.remaining_capacity\" class=\"fn\">remaining_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the capacity left in the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.remaining_capacity(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#179\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector.</p>\n<p><em><strong>Panics</strong></em> if the vector is already full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.push(<span class=\"number\">1</span>);\narray.push(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_push\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#205\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_push\" class=\"fn\">try_push</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector.</p>\n<p>Return <code>Ok</code> if the push succeeds, or return an error if the vector\nis already full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"kw\">let </span>push1 = array.try_push(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>push2 = array.try_push(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert!</span>(push1.is_ok());\n<span class=\"macro\">assert!</span>(push2.is_ok());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>overflow = array.try_push(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert!</span>(overflow.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#230\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.push_unchecked\" class=\"fn\">push_unchecked</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector without checking the capacity.</p>\n<p>It is up to the caller to ensure the capacity of the vector is\nsufficiently large.</p>\n<p>This method uses <em>debug assertions</em> to check that the arrayvec is not full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"kw\">if </span>array.len() + <span class=\"number\">2 </span>&lt;= array.capacity() {\n    <span class=\"kw\">unsafe </span>{\n        array.push_unchecked(<span class=\"number\">1</span>);\n        array.push_unchecked(<span class=\"number\">2</span>);\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#249\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater than the vectorโs current length this has no\neffect.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\narray.truncate(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.truncate(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#254\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#285\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Insert <code>element</code> at position <code>index</code>.</p>\n<p>Shift up all elements after <code>index</code>.</p>\n<p>It is an error if the index is greater than the length or if the\narrayvec is full.</p>\n<p><em><strong>Panics</strong></em> if the array is full or the <code>index</code> is out of bounds. See\n<code>try_insert</code> for fallible version.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.insert(<span class=\"number\">0</span>, <span class=\"string\">\"x\"</span>);\narray.insert(<span class=\"number\">0</span>, <span class=\"string\">\"y\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>]);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#309\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_insert\" class=\"fn\">try_insert</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>,\n    element: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Insert <code>element</code> at position <code>index</code>.</p>\n<p>Shift up all elements after <code>index</code>; the <code>index</code> must be less than\nor equal to the length.</p>\n<p>Returns an error if vector is already at full capacity.</p>\n<p><em><strong>Panics</strong></em> <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"x\"</span>).is_ok());\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"y\"</span>).is_ok());\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"z\"</span>).is_err());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>]);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#349\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the last element in the vector and return it.</p>\n<p>Return <code>Some(</code> <em>element</em> <code>)</code> if the vector is non-empty, else <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.push(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(array.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(array.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and swap the last element into its place.</p>\n<p>This operation is O(1).</p>\n<p>Return the <em>element</em> if the index is in bounds, else panic.</p>\n<p><em><strong>Panics</strong></em> if the <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_remove(<span class=\"number\">0</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_pop\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#396\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.swap_pop\" class=\"fn\">swap_pop</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and swap the last element into its place.</p>\n<p>This is a checked version of <code>.swap_remove</code>.<br />\nThis operation is O(1).</p>\n<p>Return <code>Some(</code> <em>element</em> <code>)</code> if the index is in bounds, else <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_pop(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_pop(<span class=\"number\">10</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#420\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and shift down the following elements.</p>\n<p>The <code>index</code> must be strictly less than the length of the vector.</p>\n<p><em><strong>Panics</strong></em> if the <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>removed_elt = array.remove(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(removed_elt, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#443\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.pop_at\" class=\"fn\">pop_at</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and shift down the following elements.</p>\n<p>This is a checked version of <code>.remove(index)</code>. Returns <code>None</code> if there\nis no element at <code>index</code>. Otherwise, return the element inside <code>Some</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">0</span>).is_some());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">2</span>).is_none());\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">10</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#464-465\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns false.\nThis method operates in place and preserves the order of the retained\nelements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\narray.retain(|x| <span class=\"kw-2\">*</span>x &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#545\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Set the vectorโs length without dropping or moving out elements</p>\n<p>This method is <code>unsafe</code> because it changes the notion of the\nnumber of โvalidโ elements in the vector. Use with care.</p>\n<p>This method uses <em>debug assertions</em> to check that <code>length</code> is\nnot greater than the capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_extend_from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#569-570\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_extend_from_slice\" class=\"fn\">try_extend_from_slice</a>(\n    &amp;mut self,\n    other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copy all elements from the slice and append to the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: ArrayVec&lt;usize, <span class=\"number\">10</span>&gt; = ArrayVec::new();\nvec.push(<span class=\"number\">1</span>);\nvec.try_extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">ยง</a>Errors</h5>\n<p>This method will return an error if the capacity left (see\n<a href=\"#method.remaining_capacity\"><code>remaining_capacity</code></a>) is smaller then the length of the provided\nslice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#605-606\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.Drain.html\" title=\"struct arrayvec::arrayvec::Drain\">Drain</a>&lt;'_, T, CAP&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.</p>\n<p>Note: It is unspecified how many elements are removed from the vector,\nif the <code>Drain</code> value is leaked.</p>\n<p><strong>Panics</strong> if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v1 = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>v2: ArrayVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt; = v1.drain(<span class=\"number\">0</span>..<span class=\"number\">2</span>).collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v1[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v2[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#657\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Return the inner fixed size array, if it is full to its capacity.</p>\n<p>Return an <code>Ok</code> value with the array if length equals capacity,\nreturn an <code>Err</code> with self otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#669\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.into_inner_unchecked\" class=\"fn\">into_inner_unchecked</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a></h4></section></summary><div class=\"docblock\"><p>Return the inner fixed size array.</p>\n<p>Safety:\nThis operation is safe if and only if length equals capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#685\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the ArrayVec, replacing the original with a new empty ArrayVec.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ArrayVec::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], v.take().into_inner().unwrap());\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#690\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Return a slice containing all elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#695\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Return a mutable slice containing all elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#700\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Return a raw pointer to the vectorโs buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#705\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Return a raw mutable pointer to the vectorโs buffer.</p>\n</div></details></div></details>",0,"wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1212\">Source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1213\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1208\">Source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1209\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1200\">Source</a><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1201\">Source</a><a href=\"#method.borrow\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1204\">Source</a><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1205\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1152-1153\">Source</a><a href=\"#impl-Clone-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1155\">Source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1159\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1216\">Source</a><a href=\"#impl-Debug-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1217\">Source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1220\">Source</a><a href=\"#impl-Default-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1222\">Source</a><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Return an empty array</p>\n</div></details></div></details>","Default","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#730\">Source</a><a href=\"#impl-Deref-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#731\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#733\">Source</a><a href=\"#method.deref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#738\">Source</a><a href=\"#impl-DerefMut-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#740\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1281\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'de, T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3><div class=\"docblock\"><p>Requires crate feature <code>\"serde\"</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1282-1283\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#49\">Source</a><a href=\"#impl-Drop-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#50\">Source</a><a href=\"#method.drop\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1053\">Source</a><a href=\"#impl-Extend%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Extend the <code>ArrayVec</code> with an iterator.</p>\n</div></section></summary><div class=\"docblock\"><p><em><strong>Panics</strong></em> if extending the vector exceeds its capacity.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1058\">Source</a><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the <code>ArrayVec</code> with an iterator.</p>\n<p><em><strong>Panics</strong></em> if extending the vector exceeds its capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+CAP%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#755\">Source</a><a href=\"#impl-From%3C%5BT;+CAP%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an array.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">3</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#757\">Source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; CAP]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1141\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an iterator.</p>\n</div></section></summary><div class=\"docblock\"><p><em><strong>Panics</strong></em> if the number of elements in the iterator exceeds the arrayvecโs capacity.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1145\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an iterator.</p>\n<p><em><strong>Panics</strong></em> if the number of elements in the iterator exceeds the arrayvecโs capacity.</p>\n</div></details></div></details>","FromIterator<T>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1174-1175\">Source</a><a href=\"#impl-Hash-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1177\">Source</a><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#843\">Source</a><a href=\"#impl-IntoIterator-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Iterate the <code>ArrayVec</code> with each element by value.</p>\n</div></section></summary><div class=\"docblock\"><p>The vector is consumed by this operation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">for </span>elt <span class=\"kw\">in </span>ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) {\n    <span class=\"comment\">// ...\n</span>}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#844\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#845\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.IntoIter.html\" title=\"struct arrayvec::arrayvec::IntoIter\">IntoIter</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#846\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.IntoIter.html\" title=\"struct arrayvec::arrayvec::IntoIter\">IntoIter</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1249\">Source</a><a href=\"#impl-Ord-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1250\">Source</a><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1190-1191\">Source</a><a href=\"#impl-PartialEq%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1193\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[T]>","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1182-1183\">Source</a><a href=\"#impl-PartialEq-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1185\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1227\">Source</a><a href=\"#impl-PartialOrd-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1228\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1232\">Source</a><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1236\">Source</a><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1240\">Source</a><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1244\">Source</a><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1271\">Source</a><a href=\"#impl-Serialize-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3><div class=\"docblock\"><p>Requires crate feature <code>\"serde\"</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1272-1273\">Source</a><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","wgpu_core::command::render::AttachmentDataVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#781-782\">Source</a><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3><div class=\"docblock\"><p>Try to create an <code>ArrayVec</code> from a slice. This will return an error if the slice was too big to\nfit.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n<span class=\"kw\">use </span>std::convert::TryInto <span class=\"kw\">as _</span>;\n\n<span class=\"kw\">let </span>array: ArrayVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt; = (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]).try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">4</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#784\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#786\">Source</a><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;, &lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[T]>","wgpu_core::command::render::AttachmentDataVec"],["<section id=\"impl-Eq-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1198\">Source</a><a href=\"#impl-Eq-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","wgpu_core::command::render::AttachmentDataVec"]]],["wgpu_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#64\">Source</a><a href=\"#impl-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#83\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new empty <code>ArrayVec</code>.</p>\n<p>The maximum capacity is given by the generic parameter <code>CAP</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">16</span>&gt;::new();\narray.push(<span class=\"number\">1</span>);\narray.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_const\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#99\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.new_const\" class=\"fn\">new_const</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new empty <code>ArrayVec</code> (const fn).</p>\n<p>The maximum capacity is given by the generic parameter <code>CAP</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">static </span>ARRAY: ArrayVec&lt;u8, <span class=\"number\">1024</span>&gt; = ArrayVec::new_const();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#114\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of elements in the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#126\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the <code>ArrayVec</code> is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.is_empty(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#137\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the capacity of the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#149\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return true if the <code>ArrayVec</code> is completely filled to its capacity, false otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">1</span>&gt;::new();\n<span class=\"macro\">assert!</span>(!array.is_full());\narray.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(array.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#160\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.remaining_capacity\" class=\"fn\">remaining_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the capacity left in the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.pop();\n<span class=\"macro\">assert_eq!</span>(array.remaining_capacity(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#179\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector.</p>\n<p><em><strong>Panics</strong></em> if the vector is already full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.push(<span class=\"number\">1</span>);\narray.push(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_push\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#205\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_push\" class=\"fn\">try_push</a>(&amp;mut self, element: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector.</p>\n<p>Return <code>Ok</code> if the push succeeds, or return an error if the vector\nis already full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"kw\">let </span>push1 = array.try_push(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>push2 = array.try_push(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert!</span>(push1.is_ok());\n<span class=\"macro\">assert!</span>(push2.is_ok());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>overflow = array.try_push(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert!</span>(overflow.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#230\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.push_unchecked\" class=\"fn\">push_unchecked</a>(&amp;mut self, element: T)</h4></section></summary><div class=\"docblock\"><p>Push <code>element</code> to the end of the vector without checking the capacity.</p>\n<p>It is up to the caller to ensure the capacity of the vector is\nsufficiently large.</p>\n<p>This method uses <em>debug assertions</em> to check that the arrayvec is not full.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"kw\">if </span>array.len() + <span class=\"number\">2 </span>&lt;= array.capacity() {\n    <span class=\"kw\">unsafe </span>{\n        array.push_unchecked(<span class=\"number\">1</span>);\n        array.push_unchecked(<span class=\"number\">2</span>);\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#249\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater than the vectorโs current length this has no\neffect.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\narray.truncate(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\narray.truncate(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#254\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#285\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Insert <code>element</code> at position <code>index</code>.</p>\n<p>Shift up all elements after <code>index</code>.</p>\n<p>It is an error if the index is greater than the length or if the\narrayvec is full.</p>\n<p><em><strong>Panics</strong></em> if the array is full or the <code>index</code> is out of bounds. See\n<code>try_insert</code> for fallible version.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.insert(<span class=\"number\">0</span>, <span class=\"string\">\"x\"</span>);\narray.insert(<span class=\"number\">0</span>, <span class=\"string\">\"y\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>]);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#309\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_insert\" class=\"fn\">try_insert</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>,\n    element: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Insert <code>element</code> at position <code>index</code>.</p>\n<p>Shift up all elements after <code>index</code>; the <code>index</code> must be less than\nor equal to the length.</p>\n<p>Returns an error if vector is already at full capacity.</p>\n<p><em><strong>Panics</strong></em> <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"x\"</span>).is_ok());\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"y\"</span>).is_ok());\n<span class=\"macro\">assert!</span>(array.try_insert(<span class=\"number\">0</span>, <span class=\"string\">\"z\"</span>).is_err());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>]);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#349\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the last element in the vector and return it.</p>\n<p>Return <code>Some(</code> <em>element</em> <code>)</code> if the vector is non-empty, else <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>&gt;::new();\n\narray.push(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(array.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(array.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and swap the last element into its place.</p>\n<p>This operation is O(1).</p>\n<p>Return the <em>element</em> if the index is in bounds, else panic.</p>\n<p><em><strong>Panics</strong></em> if the <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_remove(<span class=\"number\">0</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_pop\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#396\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.swap_pop\" class=\"fn\">swap_pop</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and swap the last element into its place.</p>\n<p>This is a checked version of <code>.swap_remove</code>.<br />\nThis operation is O(1).</p>\n<p>Return <code>Some(</code> <em>element</em> <code>)</code> if the index is in bounds, else <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_pop(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>]);\n\n<span class=\"macro\">assert_eq!</span>(array.swap_pop(<span class=\"number\">10</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#420\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and shift down the following elements.</p>\n<p>The <code>index</code> must be strictly less than the length of the vector.</p>\n<p><em><strong>Panics</strong></em> if the <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>removed_elt = array.remove(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(removed_elt, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_at\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#443\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.pop_at\" class=\"fn\">pop_at</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the element at <code>index</code> and shift down the following elements.</p>\n<p>This is a checked version of <code>.remove(index)</code>. Returns <code>None</code> if there\nis no element at <code>index</code>. Otherwise, return the element inside <code>Some</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">0</span>).is_some());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">2</span>).is_none());\n<span class=\"macro\">assert!</span>(array.pop_at(<span class=\"number\">10</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#464-465\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns false.\nThis method operates in place and preserves the order of the retained\nelements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\narray.retain(|x| <span class=\"kw-2\">*</span>x &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>array[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#545\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Set the vectorโs length without dropping or moving out elements</p>\n<p>This method is <code>unsafe</code> because it changes the notion of the\nnumber of โvalidโ elements in the vector. Use with care.</p>\n<p>This method uses <em>debug assertions</em> to check that <code>length</code> is\nnot greater than the capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_extend_from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#569-570\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.try_extend_from_slice\" class=\"fn\">try_extend_from_slice</a>(\n    &amp;mut self,\n    other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copy all elements from the slice and append to the <code>ArrayVec</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: ArrayVec&lt;usize, <span class=\"number\">10</span>&gt; = ArrayVec::new();\nvec.push(<span class=\"number\">1</span>);\nvec.try_extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>vec[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">ยง</a>Errors</h5>\n<p>This method will return an error if the capacity left (see\n<a href=\"#method.remaining_capacity\"><code>remaining_capacity</code></a>) is smaller then the length of the provided\nslice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#605-606\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.Drain.html\" title=\"struct arrayvec::arrayvec::Drain\">Drain</a>&lt;'_, T, CAP&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.</p>\n<p>Note: It is unspecified how many elements are removed from the vector,\nif the <code>Drain</code> value is leaked.</p>\n<p><strong>Panics</strong> if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v1 = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>v2: ArrayVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">3</span>&gt; = v1.drain(<span class=\"number\">0</span>..<span class=\"number\">2</span>).collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v1[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v2[..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#657\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>, <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Return the inner fixed size array, if it is full to its capacity.</p>\n<p>Return an <code>Ok</code> value with the array if length equals capacity,\nreturn an <code>Err</code> with self otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#669\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.into_inner_unchecked\" class=\"fn\">into_inner_unchecked</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a></h4></section></summary><div class=\"docblock\"><p>Return the inner fixed size array.</p>\n<p>Safety:\nThis operation is safe if and only if length equals capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#685\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the ArrayVec, replacing the original with a new empty ArrayVec.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ArrayVec::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], v.take().into_inner().unwrap());\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#690\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Return a slice containing all elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#695\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Return a mutable slice containing all elements of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#700\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Return a raw pointer to the vectorโs buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#705\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Return a raw mutable pointer to the vectorโs buffer.</p>\n</div></details></div></details>",0,"wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1212\">Source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1213\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1208\">Source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1209\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1200\">Source</a><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1201\">Source</a><a href=\"#method.borrow\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1204\">Source</a><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1205\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.88.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1152-1153\">Source</a><a href=\"#impl-Clone-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1155\">Source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1159\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1216\">Source</a><a href=\"#impl-Debug-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1217\">Source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.88.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.88.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1220\">Source</a><a href=\"#impl-Default-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1222\">Source</a><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class=\"docblock\"><p>Return an empty array</p>\n</div></details></div></details>","Default","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#730\">Source</a><a href=\"#impl-Deref-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#731\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#733\">Source</a><a href=\"#method.deref\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#738\">Source</a><a href=\"#impl-DerefMut-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#740\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1281\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'de, T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3><div class=\"docblock\"><p>Requires crate feature <code>\"serde\"</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1282-1283\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#49\">Source</a><a href=\"#impl-Drop-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#50\">Source</a><a href=\"#method.drop\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.88.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1053\">Source</a><a href=\"#impl-Extend%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Extend the <code>ArrayVec</code> with an iterator.</p>\n</div></section></summary><div class=\"docblock\"><p><em><strong>Panics</strong></em> if extending the vector exceeds its capacity.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1058\">Source</a><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the <code>ArrayVec</code> with an iterator.</p>\n<p><em><strong>Panics</strong></em> if extending the vector exceeds its capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.88.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+CAP%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#755\">Source</a><a href=\"#impl-From%3C%5BT;+CAP%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an array.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">3</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#757\">Source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.array.html\">[T; CAP]</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; CAP]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1141\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an iterator.</p>\n</div></section></summary><div class=\"docblock\"><p><em><strong>Panics</strong></em> if the number of elements in the iterator exceeds the arrayvecโs capacity.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1145\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an <code>ArrayVec</code> from an iterator.</p>\n<p><em><strong>Panics</strong></em> if the number of elements in the iterator exceeds the arrayvecโs capacity.</p>\n</div></details></div></details>","FromIterator<T>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1174-1175\">Source</a><a href=\"#impl-Hash-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1177\">Source</a><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.88.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#843\">Source</a><a href=\"#impl-IntoIterator-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;</h3><div class=\"docblock\"><p>Iterate the <code>ArrayVec</code> with each element by value.</p>\n</div></section></summary><div class=\"docblock\"><p>The vector is consumed by this operation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n\n<span class=\"kw\">for </span>elt <span class=\"kw\">in </span>ArrayVec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) {\n    <span class=\"comment\">// ...\n</span>}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#844\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#845\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.IntoIter.html\" title=\"struct arrayvec::arrayvec::IntoIter\">IntoIter</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#846\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.IntoIter.html\" title=\"struct arrayvec::arrayvec::IntoIter\">IntoIter</a>&lt;T, CAP&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.88.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1249\">Source</a><a href=\"#impl-Ord-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1250\">Source</a><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1190-1191\">Source</a><a href=\"#impl-PartialEq%3C%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1193\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1182-1183\">Source</a><a href=\"#impl-PartialEq-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1185\">Source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.88.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1227\">Source</a><a href=\"#impl-PartialOrd-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1228\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1232\">Source</a><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1236\">Source</a><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1240\">Source</a><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1244\">Source</a><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1271\">Source</a><a href=\"#impl-Serialize-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3><div class=\"docblock\"><p>Requires crate feature <code>\"serde\"</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1272-1273\">Source</a><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.228/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","wgpu_hal::gles::InvalidatedAttachments"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#781-782\">Source</a><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3><div class=\"docblock\"><p>Try to create an <code>ArrayVec</code> from a slice. This will return an error if the slice was too big to\nfit.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arrayvec::ArrayVec;\n<span class=\"kw\">use </span>std::convert::TryInto <span class=\"kw\">as _</span>;\n\n<span class=\"kw\">let </span>array: ArrayVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">4</span>&gt; = (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]).try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(array.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(array.capacity(), <span class=\"number\">4</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#784\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/errors/struct.CapacityError.html\" title=\"struct arrayvec::errors::CapacityError\">CapacityError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#786\">Source</a><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.88.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;, &lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.88.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[T]>","wgpu_hal::gles::InvalidatedAttachments"],["<section id=\"impl-Eq-for-ArrayVec%3CT,+CAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/arrayvec.rs.html#1198\">Source</a><a href=\"#impl-Eq-for-ArrayVec%3CT,+CAP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.88.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.88.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","wgpu_hal::gles::InvalidatedAttachments"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[104153,103985]}